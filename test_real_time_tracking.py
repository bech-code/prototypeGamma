#!/usr/bin/env python3
"""
Script de test pour le syst√®me de g√©olocalisation en temps r√©el
Teste les WebSockets et les fonctionnalit√©s de suivi
"""

import asyncio
import websockets
import json
import time
import random
from datetime import datetime

class RealTimeTrackingTester:
    def __init__(self):
        self.base_url = "ws://127.0.0.1:8000"
        self.test_token = "test_token_123"  # Token de test
        
    async def test_request_tracking_websocket(self, request_id: int):
        """Teste le WebSocket de suivi de demande"""
        print(f"\nüîç Test du suivi de demande #{request_id}")
        
        uri = f"{self.base_url}/ws/request-tracking/{request_id}/?token={self.test_token}"
        
        try:
            async with websockets.connect(uri) as websocket:
                print("‚úÖ Connexion WebSocket √©tablie")
                
                # Simuler une mise √† jour de position client
                client_location = {
                    "type": "location_update",
                    "user_type": "client",
                    "latitude": 12.6392 + random.uniform(-0.01, 0.01),
                    "longitude": -8.0029 + random.uniform(-0.01, 0.01),
                    "timestamp": datetime.now().isoformat()
                }
                
                await websocket.send(json.dumps(client_location))
                print("üìç Position client envoy√©e")
                
                # Attendre une r√©ponse
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    print(f"üì® R√©ponse re√ßue: {response}")
                except asyncio.TimeoutError:
                    print("‚ö†Ô∏è  Aucune r√©ponse re√ßue (normal pour un test)")
                
                # Simuler une mise √† jour de position technicien
                technician_location = {
                    "type": "location_update",
                    "user_type": "technician",
                    "latitude": 12.6392 + random.uniform(-0.02, 0.02),
                    "longitude": -8.0029 + random.uniform(-0.02, 0.02),
                    "timestamp": datetime.now().isoformat()
                }
                
                await websocket.send(json.dumps(technician_location))
                print("üìç Position technicien envoy√©e")
                
                # Simuler une mise √† jour de statut
                status_update = {
                    "type": "status_update",
                    "status": "in_progress",
                    "timestamp": datetime.now().isoformat()
                }
                
                await websocket.send(json.dumps(status_update))
                print("üìä Mise √† jour de statut envoy√©e")
                
        except websockets.exceptions.InvalidStatusCode as e:
            print(f"‚ùå Erreur HTTP {e.status_code}: {e}")
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
    
    async def test_technician_location_websocket(self, technician_id: int):
        """Teste le WebSocket de localisation technicien"""
        print(f"\nüîç Test de localisation technicien #{technician_id}")
        
        uri = f"{self.base_url}/ws/technician-tracking/{technician_id}/?token={self.test_token}"
        
        try:
            async with websockets.connect(uri) as websocket:
                print("‚úÖ Connexion WebSocket √©tablie")
                
                # Simuler plusieurs mises √† jour de position
                for i in range(3):
                    location_data = {
                        "latitude": 12.6392 + random.uniform(-0.01, 0.01),
                        "longitude": -8.0029 + random.uniform(-0.01, 0.01)
                    }
                    
                    await websocket.send(json.dumps(location_data))
                    print(f"üìç Position {i+1} envoy√©e: {location_data}")
                    
                    await asyncio.sleep(2)
                
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
    
    async def test_client_location_websocket(self, client_id: int):
        """Teste le WebSocket de localisation client"""
        print(f"\nüîç Test de localisation client #{client_id}")
        
        uri = f"{self.base_url}/ws/client-tracking/{client_id}/?token={self.test_token}"
        
        try:
            async with websockets.connect(uri) as websocket:
                print("‚úÖ Connexion WebSocket √©tablie")
                
                # Simuler une mise √† jour de position
                location_data = {
                    "latitude": 12.6392 + random.uniform(-0.005, 0.005),
                    "longitude": -8.0029 + random.uniform(-0.005, 0.005)
                }
                
                await websocket.send(json.dumps(location_data))
                print(f"üìç Position client envoy√©e: {location_data}")
                
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
    
    async def test_notifications_websocket(self):
        """Teste le WebSocket de notifications"""
        print(f"\nüîç Test des notifications")
        
        uri = f"{self.base_url}/ws/notifications/?token={self.test_token}"
        
        try:
            async with websockets.connect(uri) as websocket:
                print("‚úÖ Connexion WebSocket √©tablie")
                
                # Envoyer une notification de test
                notification_data = {
                    "title": "Test de g√©olocalisation",
                    "message": "Le syst√®me de suivi en temps r√©el fonctionne correctement",
                    "type": "system",
                    "created_at": datetime.now().isoformat()
                }
                
                await websocket.send(json.dumps(notification_data))
                print("üì¢ Notification envoy√©e")
                
                # Attendre une r√©ponse
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    print(f"üì® R√©ponse re√ßue: {response}")
                except asyncio.TimeoutError:
                    print("‚ö†Ô∏è  Aucune r√©ponse re√ßue (normal pour un test)")
                
        except Exception as e:
            print(f"‚ùå Erreur: {e}")
    
    async def run_all_tests(self):
        """Ex√©cute tous les tests"""
        print("üöÄ D√©marrage des tests de g√©olocalisation en temps r√©el")
        print("=" * 60)
        
        # Test des notifications
        await self.test_notifications_websocket()
        
        # Test de localisation technicien
        await self.test_technician_location_websocket(1)
        
        # Test de localisation client
        await self.test_client_location_websocket(1)
        
        # Test de suivi de demande
        await self.test_request_tracking_websocket(1)
        
        print("\n" + "=" * 60)
        print("‚úÖ Tests termin√©s")
        print("\nüìã R√©sum√© des fonctionnalit√©s test√©es:")
        print("   ‚Ä¢ WebSocket de notifications")
        print("   ‚Ä¢ WebSocket de localisation technicien")
        print("   ‚Ä¢ WebSocket de localisation client")
        print("   ‚Ä¢ WebSocket de suivi de demande")
        print("   ‚Ä¢ Envoi de positions GPS")
        print("   ‚Ä¢ Mise √† jour de statuts")
        print("\nüéØ Prochaines √©tapes:")
        print("   1. Tester avec un vrai token JWT")
        print("   2. V√©rifier la persistance en base de donn√©es")
        print("   3. Tester l'interface utilisateur")
        print("   4. V√©rifier les calculs de distance et ETA")

async def main():
    tester = RealTimeTrackingTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main()) 