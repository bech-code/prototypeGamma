#!/usr/bin/env python3
"""
Script de v√©rification des permissions et de la s√©curit√© pour les endpoints des techniciens
"""

import re
import os
from typing import Dict, List, Set
from dataclasses import dataclass

@dataclass
class SecurityIssue:
    endpoint: str
    issue_type: str
    severity: str
    description: str
    recommendation: str

@dataclass
class PermissionCheck:
    endpoint: str
    required_permission: str
    implemented: bool
    file: str
    line: int

class SecurityPermissionsChecker:
    def __init__(self):
        self.security_issues: List[SecurityIssue] = []
        self.permission_checks: List[PermissionCheck] = []
        self.endpoints_without_auth: List[str] = []
        self.endpoints_without_validation: List[str] = []
        
    def check_authentication_requirements(self):
        """V√©rifie les exigences d'authentification"""
        print("üîê V√©rification des exigences d'authentification...")
        
        # Endpoints qui doivent √™tre prot√©g√©s
        protected_endpoints = [
            '/depannage/api/technicians/me/',
            '/depannage/api/technicians/subscription_status/',
            '/depannage/api/technicians/renew_subscription/',
            '/depannage/api/repair-requests/dashboard_stats/',
            '/depannage/api/reviews/rewards/',
            '/depannage/api/notifications/',
        ]
        
        # Chercher dans les fichiers de vues
        view_files = [
            "Backend/depannage/views.py",
            "Backend/users/views.py",
        ]
        
        for view_file in view_files:
            if os.path.exists(view_file):
                try:
                    with open(view_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Chercher les d√©corateurs de permission
                    permission_patterns = [
                        r'@permission_classes\(\[([^\]]+)\]\)',
                        r'permission_classes\s*=\s*\[([^\]]+)\]',
                    ]
                    
                    for pattern in permission_patterns:
                        matches = re.finditer(pattern, content)
                        for match in matches:
                            permissions = match.group(1)
                            
                            # V√©rifier si l'authentification est requise
                            if 'IsAuthenticated' not in permissions:
                                # Chercher l'endpoint associ√©
                                lines = content[:match.start()].split('\n')
                                for i, line in enumerate(lines[-10:], 1):  # 10 lignes avant
                                    if 'def ' in line and '(' in line:
                                        method_name = line.split('def ')[1].split('(')[0]
                                        endpoint = self.get_endpoint_from_method(method_name)
                                        if endpoint:
                                            self.endpoints_without_auth.append(endpoint)
                                            self.security_issues.append(SecurityIssue(
                                                endpoint=endpoint,
                                                issue_type="Authentication",
                                                severity="HIGH",
                                                description=f"Endpoint sans authentification: {permissions}",
                                                recommendation="Ajouter @permission_classes([IsAuthenticated])"
                                            ))
                                            break
                
                except Exception as e:
                    print(f"‚ùå Erreur lecture {view_file}: {e}")
        
        print(f"‚úÖ {len(self.endpoints_without_auth)} endpoints sans authentification trouv√©s")
    
    def check_input_validation(self):
        """V√©rifie la validation des entr√©es"""
        print("‚úÖ V√©rification de la validation des entr√©es...")
        
        view_files = [
            "Backend/depannage/views.py",
            "Backend/users/views.py",
        ]
        
        for view_file in view_files:
            if os.path.exists(view_file):
                try:
                    with open(view_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Chercher les patterns de validation
                    validation_patterns = [
                        r'request\.data\.get\([\'"]([^\'"]+)[\'"]',
                        r'request\.query_params\.get\([\'"]([^\'"]+)[\'"]',
                    ]
                    
                    for pattern in validation_patterns:
                        matches = re.finditer(pattern, content)
                        for match in matches:
                            field_name = match.group(1)
                            
                            # V√©rifier si la validation est pr√©sente
                            context = content[max(0, match.start()-200):match.end()+200]
                            
                            # Chercher la validation
                            validation_checks = [
                                f'if not {field_name}:',
                                f'if {field_name} is None:',
                                f'if {field_name} == "":',
                                f'try:\s*.*?=.*?{field_name}',
                            ]
                            
                            has_validation = any(re.search(check, context) for check in validation_checks)
                            
                            if not has_validation:
                                # Chercher l'endpoint
                                lines = content[:match.start()].split('\n')
                                for i, line in enumerate(lines[-10:], 1):
                                    if 'def ' in line and '(' in line:
                                        method_name = line.split('def ')[1].split('(')[0]
                                        endpoint = self.get_endpoint_from_method(method_name)
                                        if endpoint:
                                            self.endpoints_without_validation.append(endpoint)
                                            self.security_issues.append(SecurityIssue(
                                                endpoint=endpoint,
                                                issue_type="Input Validation",
                                                severity="MEDIUM",
                                                description=f"Champ '{field_name}' sans validation",
                                                recommendation=f"Ajouter la validation pour le champ '{field_name}'"
                                            ))
                                            break
                
                except Exception as e:
                    print(f"‚ùå Erreur lecture {view_file}: {e}")
        
        print(f"‚úÖ {len(self.endpoints_without_validation)} champs sans validation trouv√©s")
    
    def check_sql_injection_prevention(self):
        """V√©rifie la pr√©vention des injections SQL"""
        print("üõ°Ô∏è V√©rification de la pr√©vention des injections SQL...")
        
        view_files = [
            "Backend/depannage/views.py",
            "Backend/users/views.py",
        ]
        
        for view_file in view_files:
            if os.path.exists(view_file):
                try:
                    with open(view_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Chercher les patterns dangereux
                    dangerous_patterns = [
                        r'\.objects\.raw\([\'"]([^\'"]+)[\'"]',
                        r'\.objects\.extra\([\'"]([^\'"]+)[\'"]',
                        r'exec\(',
                        r'eval\(',
                    ]
                    
                    for pattern in dangerous_patterns:
                        matches = re.finditer(pattern, content)
                        for match in matches:
                            dangerous_code = match.group(0)
                            
                            # Chercher l'endpoint
                            lines = content[:match.start()].split('\n')
                            for i, line in enumerate(lines[-10:], 1):
                                if 'def ' in line and '(' in line:
                                    method_name = line.split('def ')[1].split('(')[0]
                                    endpoint = self.get_endpoint_from_method(method_name)
                                    if endpoint:
                                        self.security_issues.append(SecurityIssue(
                                            endpoint=endpoint,
                                            issue_type="SQL Injection",
                                            severity="CRITICAL",
                                            description=f"Code dangereux d√©tect√©: {dangerous_code}",
                                            recommendation="Utiliser les ORM Django ou des requ√™tes param√©tr√©es"
                                        ))
                                        break
                
                except Exception as e:
                    print(f"‚ùå Erreur lecture {view_file}: {e}")
        
        print("‚úÖ V√©rification des injections SQL termin√©e")
    
    def check_xss_prevention(self):
        """V√©rifie la pr√©vention des attaques XSS"""
        print("üõ°Ô∏è V√©rification de la pr√©vention XSS...")
        
        view_files = [
            "Backend/depannage/views.py",
            "Backend/users/views.py",
        ]
        
        for view_file in view_files:
            if os.path.exists(view_file):
                try:
                    with open(view_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Chercher les patterns XSS
                    xss_patterns = [
                        r'Response\(.*?request\.data\[[\'"]([^\'"]+)[\'"]\]',
                        r'return.*?request\.data\[[\'"]([^\'"]+)[\'"]\]',
                    ]
                    
                    for pattern in xss_patterns:
                        matches = re.finditer(pattern, content)
                        for match in matches:
                            field_name = match.group(1)
                            
                            # Chercher l'endpoint
                            lines = content[:match.start()].split('\n')
                            for i, line in enumerate(lines[-10:], 1):
                                if 'def ' in line and '(' in line:
                                    method_name = line.split('def ')[1].split('(')[0]
                                    endpoint = self.get_endpoint_from_method(method_name)
                                    if endpoint:
                                        self.security_issues.append(SecurityIssue(
                                            endpoint=endpoint,
                                            issue_type="XSS",
                                            severity="MEDIUM",
                                            description=f"Donn√©es utilisateur non √©chapp√©es: {field_name}",
                                            recommendation="Utiliser les serializers Django pour la validation"
                                        ))
                                        break
                
                except Exception as e:
                    print(f"‚ùå Erreur lecture {view_file}: {e}")
        
        print("‚úÖ V√©rification XSS termin√©e")
    
    def check_csrf_protection(self):
        """V√©rifie la protection CSRF"""
        print("üõ°Ô∏è V√©rification de la protection CSRF...")
        
        # V√©rifier les fichiers de configuration
        settings_files = [
            "Backend/auth/settings.py",
            "Backend/depannage/settings.py",
        ]
        
        for settings_file in settings_files:
            if os.path.exists(settings_file):
                try:
                    with open(settings_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Chercher la configuration CSRF
                    if 'django.middleware.csrf.CsrfViewMiddleware' not in content:
                        self.security_issues.append(SecurityIssue(
                            endpoint="Global",
                            issue_type="CSRF",
                            severity="HIGH",
                            description="Middleware CSRF non configur√©",
                            recommendation="Ajouter 'django.middleware.csrf.CsrfViewMiddleware' dans MIDDLEWARE"
                        ))
                    
                    # Chercher les exemptions CSRF
                    csrf_exempt_patterns = [
                        r'@csrf_exempt',
                        r'csrf_exempt\(',
                    ]
                    
                    for pattern in csrf_exempt_patterns:
                        matches = re.finditer(pattern, content)
                        for match in matches:
                            self.security_issues.append(SecurityIssue(
                                endpoint="Global",
                                issue_type="CSRF Exemption",
                                severity="MEDIUM",
                                description="Exemption CSRF d√©tect√©e",
                                recommendation="V√©rifier si l'exemption CSRF est n√©cessaire"
                            ))
                
                except Exception as e:
                    print(f"‚ùå Erreur lecture {settings_file}: {e}")
        
        print("‚úÖ V√©rification CSRF termin√©e")
    
    def check_rate_limiting(self):
        """V√©rifie la limitation de d√©bit"""
        print("‚è±Ô∏è V√©rification de la limitation de d√©bit...")
        
        # Chercher la configuration de rate limiting
        settings_files = [
            "Backend/auth/settings.py",
            "Backend/depannage/settings.py",
        ]
        
        for settings_file in settings_files:
            if os.path.exists(settings_file):
                try:
                    with open(settings_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    # Chercher la configuration de rate limiting
                    if 'REST_FRAMEWORK' in content and 'DEFAULT_THROTTLE_CLASSES' not in content:
                        self.security_issues.append(SecurityIssue(
                            endpoint="Global",
                            issue_type="Rate Limiting",
                            severity="MEDIUM",
                            description="Limitation de d√©bit non configur√©e",
                            recommendation="Configurer DEFAULT_THROTTLE_CLASSES dans REST_FRAMEWORK"
                        ))
                
                except Exception as e:
                    print(f"‚ùå Erreur lecture {settings_file}: {e}")
        
        print("‚úÖ V√©rification de la limitation de d√©bit termin√©e")
    
    def get_endpoint_from_method(self, method_name: str) -> str:
        """Retourne l'endpoint bas√© sur le nom de la m√©thode"""
        endpoint_mapping = {
            'me': '/depannage/api/technicians/me/',
            'subscription_status': '/depannage/api/technicians/subscription_status/',
            'renew_subscription': '/depannage/api/technicians/renew_subscription/',
            'dashboard_stats': '/depannage/api/repair-requests/dashboard_stats/',
            'rewards': '/depannage/api/reviews/rewards/',
            'received': '/depannage/api/reviews/received/',
            'available_technicians': '/depannage/api/repair-requests/available_technicians/',
        }
        
        return endpoint_mapping.get(method_name, f"/depannage/api/{method_name}/")
    
    def generate_security_report(self):
        """G√©n√®re un rapport de s√©curit√© d√©taill√©"""
        print("\n" + "="*80)
        print("üõ°Ô∏è RAPPORT DE S√âCURIT√â ET PERMISSIONS")
        print("="*80)
        
        # Statistiques
        total_issues = len(self.security_issues)
        critical_issues = len([i for i in self.security_issues if i.severity == "CRITICAL"])
        high_issues = len([i for i in self.security_issues if i.severity == "HIGH"])
        medium_issues = len([i for i in self.security_issues if i.severity == "MEDIUM"])
        
        print(f"\nüìä Statistiques de s√©curit√©:")
        print(f"   Total des probl√®mes: {total_issues}")
        print(f"   Critique: {critical_issues}")
        print(f"   √âlev√©: {high_issues}")
        print(f"   Moyen: {medium_issues}")
        
        # Probl√®mes par type
        print(f"\nüîç Probl√®mes par type:")
        issue_types = {}
        for issue in self.security_issues:
            issue_types[issue.issue_type] = issue_types.get(issue.issue_type, 0) + 1
        
        for issue_type, count in issue_types.items():
            print(f"   {issue_type}: {count}")
        
        # D√©tail des probl√®mes critiques
        if critical_issues > 0:
            print(f"\nüö® Probl√®mes CRITIQUES:")
            for issue in self.security_issues:
                if issue.severity == "CRITICAL":
                    print(f"   ‚ùå {issue.endpoint}")
                    print(f"      {issue.description}")
                    print(f"      Recommandation: {issue.recommendation}")
                    print()
        
        # D√©tail des probl√®mes √©lev√©s
        if high_issues > 0:
            print(f"\n‚ö†Ô∏è  Probl√®mes √âLEV√âS:")
            for issue in self.security_issues:
                if issue.severity == "HIGH":
                    print(f"   ‚ö†Ô∏è  {issue.endpoint}")
                    print(f"      {issue.description}")
                    print(f"      Recommandation: {issue.recommendation}")
                    print()
        
        # Recommandations g√©n√©rales
        print(f"\nüí° Recommandations g√©n√©rales:")
        if critical_issues > 0:
            print(f"   üö® Corrigez imm√©diatement les {critical_issues} probl√®mes critiques")
        
        if high_issues > 0:
            print(f"   ‚ö†Ô∏è  Traitez en priorit√© les {high_issues} probl√®mes √©lev√©s")
        
        if medium_issues > 0:
            print(f"   üìù Planifiez la correction des {medium_issues} probl√®mes moyens")
        
        # Bonnes pratiques
        print(f"\n‚úÖ Bonnes pratiques √† suivre:")
        print(f"   ‚Ä¢ Utilisez toujours les serializers Django pour la validation")
        print(f"   ‚Ä¢ Impl√©mentez l'authentification JWT pour tous les endpoints sensibles")
        print(f"   ‚Ä¢ Validez toutes les entr√©es utilisateur")
        print(f"   ‚Ä¢ Utilisez les ORM Django pour √©viter les injections SQL")
        print(f"   ‚Ä¢ Configurez la limitation de d√©bit pour pr√©venir les abus")
        print(f"   ‚Ä¢ Impl√©mentez la journalisation des √©v√©nements de s√©curit√©")
        
        print(f"\nüéØ Rapport de s√©curit√© termin√©!")
    
    def run_security_check(self):
        """Ex√©cute la v√©rification de s√©curit√© compl√®te"""
        print("üöÄ D√©marrage de la v√©rification de s√©curit√©...")
        
        self.check_authentication_requirements()
        self.check_input_validation()
        self.check_sql_injection_prevention()
        self.check_xss_prevention()
        self.check_csrf_protection()
        self.check_rate_limiting()
        self.generate_security_report()

if __name__ == "__main__":
    checker = SecurityPermissionsChecker()
    checker.run_security_check() 