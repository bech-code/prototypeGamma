#!/usr/bin/env python3
"""
Script de test pour v√©rifier la logique compl√®te des abonnements des techniciens
"""

import os
import sys
import django
import requests
import json
from datetime import datetime, timedelta

# Configuration Django
sys.path.append('/Users/mohamedbechirdiarra/Downloads/Prototype5b/Backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'auth.settings')
django.setup()

from depannage.models import Technician, TechnicianSubscription, SubscriptionPaymentRequest, CinetPayPayment
from django.utils import timezone
from django.contrib.auth import get_user_model
from django.db import models

User = get_user_model()

def test_subscription_logic():
    """Test de la logique compl√®te des abonnements"""
    
    print("üîç Test de la logique compl√®te des abonnements des techniciens")
    print("=" * 70)
    
    # 1. V√©rifier les donn√©es existantes
    print("\nüìä Donn√©es existantes dans la base :")
    print("-" * 40)
    
    technicians = Technician.objects.all()
    print(f"Techniciens : {technicians.count()}")
    
    subscriptions = TechnicianSubscription.objects.all()
    print(f"Abonnements : {subscriptions.count()}")
    
    payment_requests = SubscriptionPaymentRequest.objects.all()
    print(f"Demandes de paiement : {payment_requests.count()}")
    
    cinetpay_payments = CinetPayPayment.objects.all()
    print(f"Paiements CinetPay : {cinetpay_payments.count()}")
    
    # 2. Tester les endpoints API
    print("\nüåê Test des endpoints API :")
    print("-" * 40)
    
    base_url = "http://localhost:8000"
    headers = {"Content-Type": "application/json"}
    
    endpoints_to_test = [
        "/depannage/api/subscription-requests/recent_requests/",
        "/depannage/api/subscription-requests/technician_payments/",
        "/depannage/api/subscription-requests/dashboard_stats/",
    ]
    
    for endpoint in endpoints_to_test:
        try:
            response = requests.get(f"{base_url}{endpoint}", headers=headers)
            print(f"‚úÖ {endpoint} : {response.status_code}")
            if response.status_code == 401:
                print("   ‚Üí Demande d'authentification (normal)")
            elif response.status_code == 200:
                print("   ‚Üí Fonctionne correctement")
            else:
                print(f"   ‚Üí Erreur : {response.text}")
        except Exception as e:
            print(f"‚ùå {endpoint} : Erreur de connexion - {e}")
    
    # 3. V√©rifier la logique m√©tier
    print("\n‚öôÔ∏è Test de la logique m√©tier :")
    print("-" * 40)
    
    # Test des abonnements actifs
    active_subscriptions = TechnicianSubscription.objects.filter(is_active=True)
    print(f"Abonnements actifs : {active_subscriptions.count()}")
    
    for sub in active_subscriptions[:3]:  # Afficher les 3 premiers
        days_remaining = (sub.end_date - timezone.now()).days
        print(f"  - {sub.technician.user.get_full_name()} : {sub.plan_name} (expire dans {days_remaining} jours)")
    
    # Test des demandes en attente
    pending_requests = SubscriptionPaymentRequest.objects.filter(status="pending")
    print(f"\nDemandes en attente : {pending_requests.count()}")
    
    for req in pending_requests[:3]:  # Afficher les 3 premiers
        print(f"  - {req.technician.user.get_full_name()} : {req.amount} FCFA ({req.duration_months} mois)")
    
    # 4. Test des actions d'administration
    print("\nüîß Test des actions d'administration :")
    print("-" * 40)
    
    # Simuler une validation de demande
    if pending_requests.exists():
        test_request = pending_requests.first()
        print(f"Test de validation pour : {test_request}")
        
        # Simuler l'action de validation
        try:
            # Cr√©er un abonnement
            new_subscription = TechnicianSubscription.objects.create(
                technician=test_request.technician,
                plan_name="Standard",
                start_date=timezone.now(),
                end_date=timezone.now() + timedelta(days=30 * test_request.duration_months),
                is_active=True
            )
            
            # Mettre √† jour la demande
            test_request.status = "approved"
            test_request.validated_by = User.objects.filter(is_staff=True).first()
            test_request.validated_at = timezone.now()
            test_request.subscription = new_subscription
            test_request.save()
            
            print(f"‚úÖ Demande valid√©e et abonnement cr√©√© : {new_subscription}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la validation : {e}")
    
    # 5. Statistiques finales
    print("\nüìà Statistiques finales :")
    print("-" * 40)
    
    total_technicians = Technician.objects.count()
    technicians_with_subscription = Technician.objects.filter(subscriptions__is_active=True).distinct().count()
    total_revenue = SubscriptionPaymentRequest.objects.filter(status="approved").aggregate(
        total=models.Sum('amount')
    )['total'] or 0
    
    print(f"Techniciens avec abonnement actif : {technicians_with_subscription}/{total_technicians}")
    print(f"Revenus totaux des abonnements : {total_revenue} FCFA")
    
    print("\n‚úÖ Test de la logique compl√®te termin√© !")
    print("üéØ Les endpoints sont fonctionnels et la logique m√©tier est op√©rationnelle.")

if __name__ == "__main__":
    test_subscription_logic() 