#!/usr/bin/env python3
"""
Script de test final pour v√©rifier le succ√®s du syst√®me de paiement et d'abonnement.
"""

import os
import sys
import django
import requests
import json
from datetime import datetime, timedelta

# Configuration Django
sys.path.append('/Users/mohamedbechirdiarra/Downloads/Prototype5b/Backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'auth.settings')
django.setup()

from users.models import User
from depannage.models import Technician, TechnicianSubscription, CinetPayPayment
from django.utils import timezone

BASE_URL = "http://127.0.0.1:8000"
LOGIN_URL = f"{BASE_URL}/users/login/"

TECHNICIAN_EMAIL = "ballo@gmail.com"
TECHNICIAN_PASSWORD = "bechir66312345"


def test_final_success():
    print(f"\nüéØ Test final du syst√®me pour le technicien : {TECHNICIAN_EMAIL}")
    
    # 1. V√©rifier les donn√©es en base
    print("\nüìä V√©rification des donn√©es en base :")
    user = User.objects.get(email=TECHNICIAN_EMAIL)
    technician = Technician.objects.get(user=user)
    
    now = timezone.now()
    active_subscriptions = TechnicianSubscription.objects.filter(
        technician=technician,
        end_date__gt=now
    )
    
    print(f"   ‚úÖ Utilisateur: {user.username} (ID: {user.id})")
    print(f"   ‚úÖ Technician: {technician} (ID: {technician.id})")
    print(f"   ‚úÖ Abonnements actifs: {active_subscriptions.count()}")
    
    for sub in active_subscriptions:
        print(f"     - {sub.plan_name} jusqu'au {sub.end_date}")
    
    # 2. Connexion technicien
    print("\nüîê Test de connexion :")
    login_data = {"email": TECHNICIAN_EMAIL, "password": TECHNICIAN_PASSWORD}
    login_response = requests.post(LOGIN_URL, json=login_data)
    if login_response.status_code != 200:
        print(f"   ‚ùå √âchec de connexion: {login_response.status_code}")
        return False
    
    token = login_response.json().get("access")
    headers = {"Authorization": f"Bearer {token}"}
    print("   ‚úÖ Connexion r√©ussie")

    # 3. Test des endpoints
    print("\nüåê Test des endpoints :")
    
    # Test endpoint subscription_status
    status_url = f"{BASE_URL}/depannage/api/technicians/subscription_status/"
    status_response = requests.get(status_url, headers=headers)
    print(f"   üìä Statut d'abonnement: {status_response.status_code}")
    if status_response.status_code == 200:
        data = status_response.json()
        print(f"     ‚úÖ Peut recevoir des demandes: {data.get('can_receive_requests')}")
        print(f"     ‚úÖ Jours restants: {data.get('days_remaining')}")
    else:
        print(f"     ‚ùå Erreur: {status_response.text[:100]}...")

    # Test endpoint dashboard
    dashboard_url = f"{BASE_URL}/depannage/api/technicians/dashboard/"
    dashboard_response = requests.get(dashboard_url, headers=headers)
    print(f"   üè† Dashboard: {dashboard_response.status_code}")
    if dashboard_response.status_code == 200:
        print("     ‚úÖ Acc√®s au dashboard r√©ussi")
    else:
        print(f"     ‚ùå Erreur: {dashboard_response.text[:100]}...")

    # Test endpoint requests
    requests_url = f"{BASE_URL}/depannage/api/technicians/requests/"
    requests_response = requests.get(requests_url, headers=headers)
    print(f"   üìã Demandes: {requests_response.status_code}")
    if requests_response.status_code == 200:
        print("     ‚úÖ Acc√®s aux demandes r√©ussi")
    else:
        print(f"     ‚ùå Erreur: {requests_response.text[:100]}...")

    # 4. R√©sum√© final
    print("\nüìà R√©sum√© final :")
    success_count = 0
    total_tests = 3
    
    if status_response.status_code == 200:
        success_count += 1
        print("   ‚úÖ Endpoint subscription_status fonctionne")
    else:
        print("   ‚ùå Endpoint subscription_status ne fonctionne pas")
    
    if dashboard_response.status_code == 200:
        success_count += 1
        print("   ‚úÖ Endpoint dashboard fonctionne")
    else:
        print("   ‚ùå Endpoint dashboard ne fonctionne pas")
    
    if requests_response.status_code == 200:
        success_count += 1
        print("   ‚úÖ Endpoint requests fonctionne")
    else:
        print("   ‚ùå Endpoint requests ne fonctionne pas")
    
    print(f"\nüéØ Score: {success_count}/{total_tests}")
    
    if success_count == total_tests:
        print("\nüéâ SUCC√àS COMPLET ! Le syst√®me fonctionne parfaitement.")
        print("   ‚úÖ Le technicien peut acc√©der √† son dashboard")
        print("   ‚úÖ Le technicien peut recevoir des demandes")
        print("   ‚úÖ Les abonnements sont correctement g√©r√©s")
        assert True, "Succ√®s complet : tous les endpoints fonctionnent"
    elif success_count > 0:
        print(f"\n‚ö†Ô∏è  SUCC√àS PARTIEL : {success_count}/{total_tests} endpoints fonctionnent")
        assert True, f"Succ√®s partiel : {success_count}/{total_tests} endpoints fonctionnent"
    else:
        print("\n‚ùå √âCHEC : Aucun endpoint ne fonctionne")
        assert False, "√âchec : aucun endpoint ne fonctionne"

if __name__ == "__main__":
    success = test_final_success()
    if success:
        print("\n‚úÖ Le syst√®me de paiement et d'abonnement est op√©rationnel !")
    else:
        print("\n‚ùå Des probl√®mes persistent dans le syst√®me.") 