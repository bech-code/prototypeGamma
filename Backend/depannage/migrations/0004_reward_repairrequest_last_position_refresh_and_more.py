# Generated by Django 5.2.3 on 2025-07-02 00:52

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('depannage', '0003_alter_technicianlocation_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('points_required', models.PositiveIntegerField(verbose_name='Points nécessaires')),
                ('discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Montant de la réduction')),
                ('discount_percentage', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Pourcentage de réduction')),
                ('valid_from', models.DateTimeField(verbose_name='Valide à partir de')),
                ('valid_until', models.DateTimeField(verbose_name="Valide jusqu'à")),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('quantity_available', models.PositiveIntegerField(blank=True, null=True, verbose_name='Quantité disponible')),
                ('minimum_membership_level', models.CharField(choices=[('standard', 'Standard'), ('silver', 'Argent'), ('gold', 'Or'), ('platinum', 'Platine')], default='standard', max_length=20, verbose_name='Niveau minimum requis')),
            ],
            options={
                'verbose_name': 'Récompense',
                'verbose_name_plural': 'Récompenses',
                'ordering': ['points_required', '-valid_until'],
            },
        ),
        migrations.AddField(
            model_name='repairrequest',
            name='last_position_refresh',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Dernière actualisation de position'),
        ),
        migrations.AddField(
            model_name='repairrequest',
            name='min_experience_level',
            field=models.CharField(choices=[('junior', 'Junior (0-2 ans)'), ('intermediate', 'Intermédiaire (2-5 ans)'), ('senior', 'Senior (5-10 ans)'), ('expert', 'Expert (10+ ans)')], default='junior', max_length=20, verbose_name="Niveau d'expérience minimum requis"),
        ),
        migrations.AddField(
            model_name='repairrequest',
            name='min_rating',
            field=models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Note minimale requise'),
        ),
        migrations.AddField(
            model_name='repairrequest',
            name='urgency_level',
            field=models.CharField(choices=[('normal', 'Normal (48h)'), ('same_day', 'Dans la journée'), ('urgent', 'Urgent (2h)'), ('sos', 'SOS (30min)')], default='normal', max_length=20, verbose_name="Niveau d'urgence"),
        ),
        migrations.AddField(
            model_name='technician',
            name='badge_level',
            field=models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Argent'), ('gold', 'Or'), ('platinum', 'Platine')], default='bronze', max_length=20, verbose_name='Niveau de badge'),
        ),
        migrations.AddField(
            model_name='technician',
            name='current_latitude',
            field=models.FloatField(blank=True, null=True, verbose_name='Latitude actuelle'),
        ),
        migrations.AddField(
            model_name='technician',
            name='current_longitude',
            field=models.FloatField(blank=True, null=True, verbose_name='Longitude actuelle'),
        ),
        migrations.AddField(
            model_name='technician',
            name='experience_level',
            field=models.CharField(choices=[('junior', 'Junior (0-2 ans)'), ('intermediate', 'Intermédiaire (2-5 ans)'), ('senior', 'Senior (5-10 ans)'), ('expert', 'Expert (10+ ans)')], default='junior', max_length=20, verbose_name="Niveau d'expérience"),
        ),
        migrations.AddField(
            model_name='technician',
            name='is_available_urgent',
            field=models.BooleanField(default=False, verbose_name='Disponible pour urgence'),
        ),
        migrations.AddField(
            model_name='technician',
            name='last_position_update',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Dernière mise à jour de position'),
        ),
        migrations.AddField(
            model_name='technician',
            name='response_time_minutes',
            field=models.PositiveIntegerField(default=30, verbose_name='Temps de réponse moyen (minutes)'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='type',
            field=models.CharField(choices=[('request_created', 'Nouvelle demande'), ('request_assigned', 'Demande assignée'), ('request_started', 'Travail commencé'), ('request_completed', 'Travail terminé'), ('message_received', 'Nouveau message'), ('payment_received', 'Paiement reçu'), ('review_received', 'Nouvel avis'), ('nearby_technician', 'Technicien à proximité'), ('urgent_request', 'Demande urgente'), ('promotional', 'Promotion'), ('system', 'Système')], max_length=30, verbose_name='Type'),
        ),
        migrations.CreateModel(
            name='LoyaltyProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('points', models.PositiveIntegerField(default=0, verbose_name='Points de fidélité')),
                ('total_spent', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Montant total dépensé')),
                ('membership_level', models.CharField(choices=[('standard', 'Standard'), ('silver', 'Argent'), ('gold', 'Or'), ('platinum', 'Platine')], default='standard', max_length=20, verbose_name='Niveau de membre')),
                ('last_reward_claimed', models.DateTimeField(blank=True, null=True, verbose_name='Dernière récompense réclamée')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_program', to='depannage.client')),
            ],
            options={
                'verbose_name': 'Programme de fidélité',
                'verbose_name_plural': 'Programmes de fidélité',
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('push_enabled', models.BooleanField(default=True, verbose_name='Notifications push activées')),
                ('email_enabled', models.BooleanField(default=True, verbose_name='Notifications email activées')),
                ('nearby_technician_alerts', models.BooleanField(default=True, verbose_name='Alertes techniciens à proximité')),
                ('status_updates', models.BooleanField(default=True, verbose_name='Mises à jour de statut')),
                ('promotional_notifications', models.BooleanField(default=True, verbose_name='Notifications promotionnelles')),
                ('quiet_hours_start', models.TimeField(blank=True, null=True, verbose_name='Début des heures silencieuses')),
                ('quiet_hours_end', models.TimeField(blank=True, null=True, verbose_name='Fin des heures silencieuses')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Préférence de notification',
                'verbose_name_plural': 'Préférences de notification',
            },
        ),
        migrations.CreateModel(
            name='RewardClaim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('points_spent', models.PositiveIntegerField(verbose_name='Points dépensés')),
                ('used_at', models.DateTimeField(blank=True, null=True, verbose_name='Utilisée le')),
                ('loyalty_program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reward_claims', to='depannage.loyaltyprogram')),
                ('repair_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reward_claims', to='depannage.repairrequest')),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claims', to='depannage.reward')),
            ],
            options={
                'verbose_name': 'Récompense réclamée',
                'verbose_name_plural': 'Récompenses réclamées',
                'ordering': ['-created_at'],
            },
        ),
    ]
