# Generated by Django 5.2.3 on 2025-06-22 00:59

import depannage.models
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('key', models.CharField(max_length=100, unique=True, verbose_name='Clé')),
                ('value', models.TextField(verbose_name='Valeur')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
            ],
            options={
                'verbose_name': 'Configuration système',
                'verbose_name_plural': 'Configurations système',
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('address', models.TextField(verbose_name='Adresse complète')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('participants', models.ManyToManyField(related_name='conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Conversation',
                'verbose_name_plural': 'Conversations',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('content', models.TextField(verbose_name='Contenu')),
                ('message_type', models.CharField(choices=[('text', 'Texte'), ('image', 'Image'), ('file', 'Fichier'), ('system', 'Système')], default='text', max_length=20, verbose_name='Type')),
                ('is_read', models.BooleanField(default=False, verbose_name='Lu')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lu le')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='depannage.conversation')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MessageAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('file', models.FileField(upload_to=depannage.models.MessageAttachment.get_upload_path, verbose_name='Fichier')),
                ('file_name', models.CharField(max_length=255, verbose_name='Nom du fichier')),
                ('file_size', models.PositiveIntegerField(verbose_name='Taille du fichier')),
                ('content_type', models.CharField(max_length=100, verbose_name='Type MIME')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='depannage.message')),
            ],
            options={
                'verbose_name': 'Pièce jointe',
                'verbose_name_plural': 'Pièces jointes',
            },
        ),
        migrations.CreateModel(
            name='RepairRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description détaillée')),
                ('specialty_needed', models.CharField(choices=[('electrician', 'Électricien'), ('plumber', 'Plombier'), ('mechanic', 'Mécanicien'), ('it', 'Informatique'), ('air_conditioning', 'Climatisation'), ('appliance_repair', 'Électroménager'), ('locksmith', 'Serrurier'), ('other', 'Autre')], max_length=50, verbose_name='Spécialité requise')),
                ('priority', models.CharField(choices=[('low', 'Basse'), ('medium', 'Moyenne'), ('high', 'Haute'), ('urgent', 'Urgente')], default='medium', max_length=20, verbose_name='Priorité')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('assigned', 'Assignée'), ('in_progress', 'En cours'), ('completed', 'Terminée'), ('cancelled', 'Annulée')], default='pending', max_length=20, verbose_name='Statut')),
                ('address', models.TextField(verbose_name="Adresse d'intervention")),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('preferred_date', models.DateTimeField(blank=True, null=True, verbose_name='Date souhaitée')),
                ('assigned_at', models.DateTimeField(blank=True, null=True, verbose_name='Assignée le')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Commencée le')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Terminée le')),
                ('estimated_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Prix estimé')),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Prix final')),
                ('travel_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, verbose_name='Frais de déplacement')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repair_requests', to='depannage.client')),
            ],
            options={
                'verbose_name': 'Demande de dépannage',
                'verbose_name_plural': 'Demandes de dépannage',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='conversation',
            name='request',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='conversation', to='depannage.repairrequest'),
        ),
        migrations.CreateModel(
            name='RequestDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('file', models.FileField(upload_to=depannage.models.RequestDocument.get_upload_path, verbose_name='Fichier')),
                ('document_type', models.CharField(choices=[('photo_before', 'Photo avant'), ('photo_after', 'Photo après'), ('invoice', 'Facture'), ('estimate', 'Devis'), ('other', 'Autre')], default='other', max_length=20, verbose_name='Type de document')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='depannage.repairrequest')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Technician',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('specialty', models.CharField(choices=[('electrician', 'Électricien'), ('plumber', 'Plombier'), ('mechanic', 'Mécanicien'), ('it', 'Informatique'), ('air_conditioning', 'Climatisation'), ('appliance_repair', 'Électroménager'), ('locksmith', 'Serrurier'), ('other', 'Autre')], default='other', max_length=50, verbose_name='Spécialité')),
                ('phone', models.CharField(max_length=20, verbose_name='Téléphone')),
                ('is_available', models.BooleanField(default=True, verbose_name='Disponible')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Vérifié')),
                ('years_experience', models.PositiveIntegerField(default=0, verbose_name="Années d'expérience")),
                ('hourly_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, verbose_name='Tarif horaire (FCFA)')),
                ('service_radius_km', models.PositiveIntegerField(default=10, verbose_name="Rayon d'intervention (km)")),
                ('bio', models.TextField(blank=True, verbose_name='Présentation')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='technician_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Technicien',
                'verbose_name_plural': 'Techniciens',
                'ordering': ['-is_verified', '-years_experience'],
            },
        ),
        migrations.AddField(
            model_name='repairrequest',
            name='technician',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='repair_requests', to='depannage.technician'),
        ),
        migrations.CreateModel(
            name='TechnicianLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('accuracy', models.FloatField(default=0, verbose_name='Précision (mètres)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('technician', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='current_location', to='depannage.technician')),
            ],
            options={
                'verbose_name': 'Localisation technicien',
                'verbose_name_plural': 'Localisations techniciens',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'En cours'), ('completed', 'Complété'), ('failed', 'Échoué'), ('refunded', 'Remboursé')], default='pending', max_length=20, verbose_name='Statut')),
                ('method', models.CharField(choices=[('orange_money', 'Orange Money'), ('moov_money', 'Moov Money'), ('cash', 'Espèces'), ('bank_transfer', 'Virement bancaire')], max_length=20, verbose_name='Méthode')),
                ('payment_type', models.CharField(choices=[('client_payment', 'Paiement client'), ('technician_payout', 'Paiement technicien'), ('refund', 'Remboursement')], max_length=20, verbose_name='Type de paiement')),
                ('transaction_id', models.CharField(blank=True, max_length=100, verbose_name='ID Transaction')),
                ('reference', models.CharField(blank=True, max_length=100, verbose_name='Référence')),
                ('fees', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, verbose_name='Frais')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='Traité le')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('payer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments_made', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments_received', to=settings.AUTH_USER_MODEL)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='depannage.repairrequest')),
            ],
            options={
                'verbose_name': 'Paiement',
                'verbose_name_plural': 'Paiements',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status', 'created_at'], name='depannage_p_status_81f0df_idx'), models.Index(fields=['payer', 'status'], name='depannage_p_payer_i_614749_idx'), models.Index(fields=['recipient', 'status'], name='depannage_p_recipie_c0306b_idx')],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('type', models.CharField(choices=[('request_created', 'Nouvelle demande'), ('request_assigned', 'Demande assignée'), ('request_started', 'Travail commencé'), ('request_completed', 'Travail terminé'), ('message_received', 'Nouveau message'), ('payment_received', 'Paiement reçu'), ('review_received', 'Nouvel avis'), ('system', 'Système')], max_length=30, verbose_name='Type')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('is_read', models.BooleanField(default=False, verbose_name='Lue')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lue le')),
                ('extra_data', models.JSONField(blank=True, default=dict, verbose_name='Données supplémentaires')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='depannage.repairrequest')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['recipient', 'is_read', '-created_at'], name='depannage_n_recipie_581080_idx')],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Note')),
                ('comment', models.TextField(blank=True, verbose_name='Commentaire')),
                ('would_recommend', models.BooleanField(default=True, verbose_name='Recommanderait')),
                ('punctuality_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Ponctualité')),
                ('quality_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Qualité du travail')),
                ('communication_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Communication')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to='depannage.client')),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='depannage.repairrequest')),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_received', to='depannage.technician')),
            ],
            options={
                'verbose_name': 'Avis',
                'verbose_name_plural': 'Avis',
                'ordering': ['-created_at'],
                'constraints': [models.UniqueConstraint(fields=('request',), name='unique_review_per_request')],
            },
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['status', 'created_at'], name='depannage_r_status_051d50_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['specialty_needed', 'status'], name='depannage_r_special_4cbcda_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['client', 'status'], name='depannage_r_client__2f8781_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['technician', 'status'], name='depannage_r_technic_f0fef2_idx'),
        ),
    ]
