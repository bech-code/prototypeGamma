# Generated by Django 5.2.4 on 2025-07-14 03:01

import depannage.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GlobalStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('total_users', models.PositiveIntegerField(default=0)),
                ('total_requests', models.PositiveIntegerField(default=0)),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('total_payouts', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('platform_fees', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('avg_request_value', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('avg_response_time_hours', models.FloatField(default=0)),
                ('avg_completion_time_hours', models.FloatField(default=0)),
                ('success_rate', models.FloatField(default=0)),
                ('conversion_rate', models.FloatField(default=0)),
                ('retention_rate', models.FloatField(default=0)),
                ('daily_stats', models.JSONField(blank=True, default=dict)),
                ('weekly_stats', models.JSONField(blank=True, default=dict)),
                ('monthly_stats', models.JSONField(blank=True, default=dict)),
                ('top_cities', models.JSONField(blank=True, default=list)),
                ('service_areas', models.JSONField(blank=True, default=list)),
                ('specialty_distribution', models.JSONField(blank=True, default=dict)),
                ('top_specialties', models.JSONField(blank=True, default=list)),
                ('calculation_duration', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='PlatformConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform_name', models.CharField(max_length=100)),
                ('support_email', models.EmailField(max_length=254)),
                ('default_language', models.CharField(choices=[('fr', 'Français'), ('en', 'English')], default='fr', max_length=2)),
                ('timezone', models.CharField(default='Africa/Abidjan', max_length=50)),
                ('payment_methods', models.JSONField(blank=True, default=list)),
                ('commission_rate', models.DecimalField(decimal_places=2, default=10.0, max_digits=5)),
                ('min_payout_amount', models.DecimalField(decimal_places=2, default=1000.0, max_digits=10)),
                ('max_interventions_per_day', models.IntegerField(default=10)),
                ('service_radius_km', models.FloatField(default=20.0)),
                ('cancelation_deadline_hours', models.IntegerField(default=2)),
                ('enable_geolocation_map', models.BooleanField(default=True)),
                ('default_map_provider', models.CharField(default='OpenStreetMap', max_length=50)),
                ('theme_color', models.CharField(default='#2563eb', max_length=20)),
                ('enable_2fa_admin', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('points_required', models.PositiveIntegerField(verbose_name='Points nécessaires')),
                ('discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Montant de la réduction')),
                ('discount_percentage', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='Pourcentage de réduction')),
                ('valid_from', models.DateTimeField(verbose_name='Valide à partir de')),
                ('valid_until', models.DateTimeField(verbose_name="Valide jusqu'à")),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('quantity_available', models.PositiveIntegerField(blank=True, null=True, verbose_name='Quantité disponible')),
                ('minimum_membership_level', models.CharField(choices=[('standard', 'Standard'), ('silver', 'Argent'), ('gold', 'Or'), ('platinum', 'Platine')], default='standard', max_length=20, verbose_name='Niveau minimum requis')),
            ],
            options={
                'verbose_name': 'Récompense',
                'verbose_name_plural': 'Récompenses',
                'ordering': ['points_required', '-valid_until'],
            },
        ),
        migrations.CreateModel(
            name='StatisticsCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_key', models.CharField(max_length=128, unique=True)),
                ('cache_data', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('key', models.CharField(max_length=100, unique=True, verbose_name='Clé')),
                ('value', models.TextField(verbose_name='Valeur')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
            ],
            options={
                'verbose_name': 'Configuration système',
                'verbose_name_plural': 'Configurations système',
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='ChatConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('last_message_at', models.DateTimeField(blank=True, null=True, verbose_name='Dernier message')),
                ('is_pinned', models.BooleanField(default=False, help_text='Conversation épinglée en haut de la liste', verbose_name='Épinglée')),
                ('muted_until', models.DateTimeField(blank=True, help_text="Date jusqu'à laquelle les notifications sont désactivées", null=True, verbose_name="Silencieuse jusqu'au")),
                ('last_activity_type', models.CharField(choices=[('message', 'Message'), ('location', 'Localisation'), ('voice', 'Message vocal'), ('file', 'Fichier'), ('call', 'Appel')], default='message', help_text='Type de la dernière activité dans la conversation', max_length=20, verbose_name='Type de dernière activité')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='client_chat_conversations', to=settings.AUTH_USER_MODEL)),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='technician_chat_conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Conversation de chat',
                'verbose_name_plural': 'Conversations de chat',
                'ordering': ['-last_message_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('content', models.TextField(verbose_name='Contenu')),
                ('message_type', models.CharField(choices=[('text', 'Texte'), ('image', 'Image'), ('file', 'Fichier'), ('system', 'Système'), ('location', 'Localisation'), ('voice', 'Message vocal'), ('video', 'Vidéo')], default='text', max_length=20, verbose_name='Type')),
                ('is_read', models.BooleanField(default=False, verbose_name='Lu')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lu le')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('voice_duration', models.PositiveIntegerField(blank=True, help_text='Durée en secondes pour les messages vocaux', null=True, verbose_name='Durée du message vocal (secondes)')),
                ('is_edited', models.BooleanField(default=False, help_text='Indique si le message a été modifié', verbose_name='Modifié')),
                ('edited_at', models.DateTimeField(blank=True, help_text='Date de modification du message', null=True, verbose_name='Modifié le')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='depannage.chatconversation')),
                ('reply_to', models.ForeignKey(blank=True, help_text='Message auquel celui-ci répond', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='depannage.chatmessage', verbose_name='Réponse à')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_chat_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Message de chat',
                'verbose_name_plural': 'Messages de chat',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatMessageAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('file', models.FileField(upload_to=depannage.models.ChatMessageAttachment.get_upload_path, verbose_name='Fichier')),
                ('file_name', models.CharField(max_length=255, verbose_name='Nom du fichier')),
                ('file_size', models.PositiveIntegerField(verbose_name='Taille du fichier')),
                ('content_type', models.CharField(max_length=100, verbose_name='Type MIME')),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Durée pour les fichiers audio/vidéo', null=True, verbose_name='Durée (secondes)')),
                ('thumbnail', models.ImageField(blank=True, help_text='Miniature pour les images/vidéos', null=True, upload_to='chat_thumbnails/', verbose_name='Miniature')),
                ('is_processed', models.BooleanField(default=False, help_text='Indique si le fichier a été traité (génération de miniature, etc.)', verbose_name='Traité')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='depannage.chatmessage')),
            ],
            options={
                'verbose_name': 'Pièce jointe de chat',
                'verbose_name_plural': 'Pièces jointes de chat',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('address', models.TextField(verbose_name='Adresse complète')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ClientLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('accuracy', models.FloatField(blank=True, help_text='Précision GPS en mètres', null=True, verbose_name='Précision (mètres)')),
                ('altitude', models.FloatField(blank=True, help_text='Altitude en mètres', null=True, verbose_name='Altitude (mètres)')),
                ('speed', models.FloatField(blank=True, help_text='Vitesse de déplacement en km/h', null=True, verbose_name='Vitesse (km/h)')),
                ('heading', models.FloatField(blank=True, help_text='Direction en degrés (0-360)', null=True, verbose_name='Direction (degrés)')),
                ('is_moving', models.BooleanField(default=False, help_text='Indique si le client est en mouvement', verbose_name='En mouvement')),
                ('battery_level', models.PositiveSmallIntegerField(blank=True, help_text='Niveau de batterie du dispositif', null=True, verbose_name='Niveau de batterie (%)')),
                ('location_source', models.CharField(choices=[('gps', 'GPS'), ('network', 'Réseau cellulaire'), ('wifi', 'WiFi'), ('manual', 'Manuel')], default='gps', help_text='Source de la localisation', max_length=20, verbose_name='Source de localisation')),
                ('address', models.TextField(blank=True, help_text='Adresse géocodée', verbose_name='Adresse')),
                ('city', models.CharField(blank=True, help_text='Ville de localisation', max_length=100, verbose_name='Ville')),
                ('country', models.CharField(default='CI', help_text='Code pays ISO', max_length=2, verbose_name='Pays')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='location', to='depannage.client')),
            ],
            options={
                'verbose_name': 'Localisation de client',
                'verbose_name_plural': 'Localisations des clients',
            },
        ),
        migrations.CreateModel(
            name='CommunicationNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('notification_type', models.CharField(choices=[('new_message', 'Nouveau message'), ('message_read', 'Message lu'), ('typing_started', 'Début de frappe'), ('typing_stopped', 'Fin de frappe'), ('location_shared', 'Localisation partagée'), ('voice_message', 'Message vocal'), ('file_shared', 'Fichier partagé'), ('call_missed', 'Appel manqué'), ('user_online', 'Utilisateur en ligne'), ('user_offline', 'Utilisateur hors ligne')], max_length=30, verbose_name='Type de notification')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('is_read', models.BooleanField(default=False, verbose_name='Lue')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lue le')),
                ('extra_data', models.JSONField(blank=True, default=dict, verbose_name='Données supplémentaires')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='depannage.chatconversation', verbose_name='Conversation')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communication_notifications', to=settings.AUTH_USER_MODEL, verbose_name='Destinataire')),
            ],
            options={
                'verbose_name': 'Notification de communication',
                'verbose_name_plural': 'Notifications de communication',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunicationSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Démarrée à')),
                ('ended_at', models.DateTimeField(blank=True, null=True, verbose_name='Terminée à')),
                ('messages_sent', models.PositiveIntegerField(default=0, verbose_name='Messages envoyés')),
                ('messages_received', models.PositiveIntegerField(default=0, verbose_name='Messages reçus')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('device_info', models.JSONField(blank=True, default=dict, verbose_name='Informations appareil')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='Adresse IP')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='depannage.chatconversation', verbose_name='Conversation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communication_sessions', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Session de communication',
                'verbose_name_plural': 'Sessions de communication',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='CommunicationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('auto_read_receipts', models.BooleanField(default=True, verbose_name='Accusés de lecture automatiques')),
                ('typing_indicators', models.BooleanField(default=True, verbose_name='Indicateurs de frappe')),
                ('sound_notifications', models.BooleanField(default=True, verbose_name='Notifications sonores')),
                ('vibration_notifications', models.BooleanField(default=True, verbose_name='Notifications vibrantes')),
                ('message_preview', models.BooleanField(default=True, verbose_name='Aperçu des messages')),
                ('auto_download_media', models.BooleanField(default=False, verbose_name='Téléchargement automatique des médias')),
                ('max_file_size_mb', models.PositiveIntegerField(default=10, verbose_name='Taille maximale des fichiers (MB)')),
                ('allowed_file_types', models.JSONField(default=list, verbose_name='Types de fichiers autorisés')),
                ('quiet_hours_start', models.TimeField(blank=True, null=True, verbose_name='Début des heures silencieuses')),
                ('quiet_hours_end', models.TimeField(blank=True, null=True, verbose_name='Fin des heures silencieuses')),
                ('language', models.CharField(default='fr', max_length=10, verbose_name='Langue')),
                ('theme', models.CharField(default='light', max_length=20, verbose_name='Thème')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='communication_settings', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Paramètres de communication',
                'verbose_name_plural': 'Paramètres de communication',
            },
        ),
        migrations.CreateModel(
            name='CommunicationStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('total_messages', models.PositiveIntegerField(default=0, verbose_name='Messages totaux')),
                ('text_messages', models.PositiveIntegerField(default=0, verbose_name='Messages texte')),
                ('voice_messages', models.PositiveIntegerField(default=0, verbose_name='Messages vocaux')),
                ('location_shares', models.PositiveIntegerField(default=0, verbose_name='Partages de localisation')),
                ('file_shares', models.PositiveIntegerField(default=0, verbose_name='Partages de fichiers')),
                ('avg_response_time_minutes', models.FloatField(default=0.0, verbose_name='Temps de réponse moyen (minutes)')),
                ('last_message_at', models.DateTimeField(blank=True, null=True, verbose_name='Dernier message')),
                ('first_message_at', models.DateTimeField(blank=True, null=True, verbose_name='Premier message')),
                ('client_online_time', models.PositiveIntegerField(default=0, verbose_name='Temps en ligne client (minutes)')),
                ('technician_online_time', models.PositiveIntegerField(default=0, verbose_name='Temps en ligne technicien (minutes)')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='depannage.chatconversation', verbose_name='Conversation')),
            ],
            options={
                'verbose_name': 'Statistiques de communication',
                'verbose_name_plural': 'Statistiques de communication',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('participants', models.ManyToManyField(related_name='conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Conversation',
                'verbose_name_plural': 'Conversations',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='GeolocationSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('location_sharing_enabled', models.BooleanField(default=True, verbose_name='Partage de localisation activé')),
                ('background_location_enabled', models.BooleanField(default=False, verbose_name='Localisation en arrière-plan')),
                ('high_accuracy_mode', models.BooleanField(default=True, verbose_name='Mode haute précision')),
                ('location_update_interval_seconds', models.PositiveIntegerField(default=30, verbose_name='Intervalle de mise à jour (secondes)')),
                ('max_location_history_days', models.PositiveIntegerField(default=30, verbose_name='Historique max (jours)')),
                ('geofencing_enabled', models.BooleanField(default=False, verbose_name='Géofencing activé')),
                ('speed_limit_kmh', models.PositiveIntegerField(blank=True, null=True, verbose_name='Limite de vitesse (km/h)')),
                ('battery_threshold_percent', models.PositiveSmallIntegerField(default=20, verbose_name='Seuil batterie (%)')),
                ('accuracy_threshold_meters', models.PositiveIntegerField(default=100, verbose_name='Seuil précision (mètres)')),
                ('alert_notifications_enabled', models.BooleanField(default=True, verbose_name="Notifications d'alerte")),
                ('map_provider', models.CharField(choices=[('openstreetmap', 'OpenStreetMap'), ('google_maps', 'Google Maps'), ('mapbox', 'Mapbox'), ('here', 'HERE Maps')], default='openstreetmap', max_length=20, verbose_name='Fournisseur de carte')),
                ('default_zoom_level', models.PositiveSmallIntegerField(default=13, verbose_name='Niveau de zoom par défaut')),
                ('show_traffic', models.BooleanField(default=False, verbose_name='Afficher le trafic')),
                ('show_pois', models.BooleanField(default=True, verbose_name='Afficher les POI')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='geolocation_settings', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Paramètres de géolocalisation',
                'verbose_name_plural': 'Paramètres de géolocalisation',
            },
        ),
        migrations.CreateModel(
            name='LoyaltyProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('points', models.PositiveIntegerField(default=0, verbose_name='Points de fidélité')),
                ('total_spent', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Montant total dépensé')),
                ('membership_level', models.CharField(choices=[('standard', 'Standard'), ('silver', 'Argent'), ('gold', 'Or'), ('platinum', 'Platine')], default='standard', max_length=20, verbose_name='Niveau de membre')),
                ('last_reward_claimed', models.DateTimeField(blank=True, null=True, verbose_name='Dernière récompense réclamée')),
                ('client', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_program', to='depannage.client')),
            ],
            options={
                'verbose_name': 'Programme de fidélité',
                'verbose_name_plural': 'Programmes de fidélité',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('content', models.TextField(verbose_name='Contenu')),
                ('message_type', models.CharField(choices=[('text', 'Texte'), ('image', 'Image'), ('file', 'Fichier'), ('system', 'Système')], default='text', max_length=20, verbose_name='Type')),
                ('is_read', models.BooleanField(default=False, verbose_name='Lu')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lu le')),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='depannage.conversation')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MessageAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('file', models.FileField(upload_to=depannage.models.MessageAttachment.get_upload_path, verbose_name='Fichier')),
                ('file_name', models.CharField(max_length=255, verbose_name='Nom du fichier')),
                ('file_size', models.PositiveIntegerField(verbose_name='Taille du fichier')),
                ('content_type', models.CharField(max_length=100, verbose_name='Type MIME')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='depannage.message')),
            ],
            options={
                'verbose_name': 'Pièce jointe',
                'verbose_name_plural': 'Pièces jointes',
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('push_enabled', models.BooleanField(default=True, verbose_name='Notifications push activées')),
                ('email_enabled', models.BooleanField(default=True, verbose_name='Notifications email activées')),
                ('nearby_technician_alerts', models.BooleanField(default=True, verbose_name='Alertes techniciens à proximité')),
                ('status_updates', models.BooleanField(default=True, verbose_name='Mises à jour de statut')),
                ('promotional_notifications', models.BooleanField(default=True, verbose_name='Notifications promotionnelles')),
                ('quiet_hours_start', models.TimeField(blank=True, null=True, verbose_name='Début des heures silencieuses')),
                ('quiet_hours_end', models.TimeField(blank=True, null=True, verbose_name='Fin des heures silencieuses')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Préférence de notification',
                'verbose_name_plural': 'Préférences de notification',
            },
        ),
        migrations.CreateModel(
            name='PointOfInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('poi_type', models.CharField(choices=[('landmark', 'Point de repère'), ('restaurant', 'Restaurant'), ('gas_station', 'Station-service'), ('hospital', 'Hôpital'), ('police', 'Commissariat'), ('bank', 'Banque'), ('pharmacy', 'Pharmacie'), ('store', 'Magasin'), ('other', 'Autre')], default='other', max_length=30, verbose_name='Type de POI')),
                ('address', models.TextField(blank=True, verbose_name='Adresse')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Téléphone')),
                ('website', models.URLField(blank=True, verbose_name='Site web')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('rating', models.FloatField(blank=True, null=True, verbose_name='Note')),
            ],
            options={
                'verbose_name': "Point d'intérêt",
                'verbose_name_plural': "Points d'intérêt",
                'ordering': ['name'],
                'indexes': [models.Index(fields=['latitude', 'longitude'], name='depannage_p_latitud_934658_idx'), models.Index(fields=['poi_type', 'is_active'], name='depannage_p_poi_typ_901d21_idx')],
            },
        ),
        migrations.CreateModel(
            name='RepairRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description détaillée')),
                ('specialty_needed', models.CharField(choices=[('electrician', 'Électricien'), ('plumber', 'Plombier'), ('mechanic', 'Mécanicien'), ('it', 'Informatique'), ('air_conditioning', 'Climatisation'), ('appliance_repair', 'Électroménager'), ('locksmith', 'Serrurier'), ('other', 'Autre')], max_length=50, verbose_name='Spécialité requise')),
                ('priority', models.CharField(choices=[('low', 'Basse'), ('medium', 'Moyenne'), ('high', 'Haute'), ('urgent', 'Urgente')], default='medium', max_length=20, verbose_name='Priorité')),
                ('urgency_level', models.CharField(choices=[('normal', 'Normal (48h)'), ('same_day', 'Dans la journée'), ('urgent', 'Urgent (2h)'), ('sos', 'SOS (30min)')], default='normal', max_length=20, verbose_name="Niveau d'urgence")),
                ('min_experience_level', models.CharField(choices=[('junior', 'Junior (0-2 ans)'), ('intermediate', 'Intermédiaire (2-5 ans)'), ('senior', 'Senior (5-10 ans)'), ('expert', 'Expert (10+ ans)')], default='junior', max_length=20, verbose_name="Niveau d'expérience minimum requis")),
                ('min_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Note minimale requise')),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('pending', 'En attente'), ('assigned', 'Assignée'), ('in_progress', 'En cours'), ('completed', 'Terminée'), ('cancelled', 'Annulée')], default='pending', max_length=20, verbose_name='Statut')),
                ('last_position_refresh', models.DateTimeField(blank=True, null=True, verbose_name='Dernière actualisation de position')),
                ('address', models.TextField(verbose_name="Adresse d'intervention")),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('preferred_date', models.DateTimeField(blank=True, null=True, verbose_name='Date souhaitée')),
                ('assigned_at', models.DateTimeField(blank=True, null=True, verbose_name='Assignée le')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='Commencée le')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Terminée le')),
                ('estimated_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Prix estimé')),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Prix final')),
                ('travel_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, verbose_name='Frais de déplacement')),
                ('is_urgent', models.BooleanField(default=False, verbose_name='Demande urgente (frontend)')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='Ville (frontend)')),
                ('postalCode', models.CharField(blank=True, max_length=20, verbose_name='Code postal (frontend)')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Date souhaitée (frontend)')),
                ('time', models.TimeField(blank=True, null=True, verbose_name='Heure souhaitée (frontend)')),
                ('service_type', models.CharField(blank=True, max_length=50, verbose_name='Type de service (frontend)')),
                ('no_show_count', models.PositiveIntegerField(default=0, verbose_name="Nombre de signalements d'absence technicien")),
                ('mission_validated', models.BooleanField(default=False, verbose_name='Mission validée par le client')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repair_requests', to='depannage.client')),
            ],
            options={
                'verbose_name': 'Demande de dépannage',
                'verbose_name_plural': 'Demandes de dépannage',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('processing', 'En cours'), ('completed', 'Complété'), ('failed', 'Échoué'), ('refunded', 'Remboursé')], default='pending', max_length=20, verbose_name='Statut')),
                ('method', models.CharField(choices=[('orange_money', 'Orange Money'), ('moov_money', 'Moov Money'), ('cash', 'Espèces'), ('bank_transfer', 'Virement bancaire')], max_length=20, verbose_name='Méthode')),
                ('payment_type', models.CharField(choices=[('client_payment', 'Paiement client'), ('technician_payout', 'Paiement technicien'), ('refund', 'Remboursement')], max_length=20, verbose_name='Type de paiement')),
                ('transaction_id', models.CharField(blank=True, max_length=100, verbose_name='ID Transaction')),
                ('reference', models.CharField(blank=True, max_length=100, verbose_name='Référence')),
                ('fees', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, verbose_name='Frais')),
                ('processed_at', models.DateTimeField(blank=True, null=True, verbose_name='Traité le')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('payer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments_made', to=settings.AUTH_USER_MODEL)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments_received', to=settings.AUTH_USER_MODEL)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='depannage.repairrequest')),
            ],
            options={
                'verbose_name': 'Paiement',
                'verbose_name_plural': 'Paiements',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('type', models.CharField(choices=[('request_created', 'Nouvelle demande'), ('request_assigned', 'Demande assignée'), ('request_started', 'Travail commencé'), ('request_completed', 'Travail terminé'), ('message_received', 'Nouveau message'), ('payment_received', 'Paiement reçu'), ('review_received', 'Nouvel avis'), ('nearby_technician', 'Technicien à proximité'), ('urgent_request', 'Demande urgente'), ('promotional', 'Promotion'), ('system', 'Système')], max_length=30, verbose_name='Type')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('is_read', models.BooleanField(default=False, verbose_name='Lue')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lue le')),
                ('extra_data', models.JSONField(blank=True, default=dict, verbose_name='Données supplémentaires')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='depannage.repairrequest')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LocationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('accuracy', models.FloatField(blank=True, null=True, verbose_name='Précision (mètres)')),
                ('altitude', models.FloatField(blank=True, null=True, verbose_name='Altitude (mètres)')),
                ('speed', models.FloatField(blank=True, null=True, verbose_name='Vitesse (km/h)')),
                ('heading', models.FloatField(blank=True, null=True, verbose_name='Direction (degrés)')),
                ('is_moving', models.BooleanField(default=False, verbose_name='En mouvement')),
                ('battery_level', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Niveau de batterie (%)')),
                ('location_source', models.CharField(choices=[('gps', 'GPS'), ('network', 'Réseau cellulaire'), ('wifi', 'WiFi'), ('manual', 'Manuel')], default='gps', max_length=20, verbose_name='Source de localisation')),
                ('address', models.TextField(blank=True, verbose_name='Adresse')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='Ville')),
                ('country', models.CharField(default='CI', max_length=2, verbose_name='Pays')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='location_history', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='location_history', to='depannage.repairrequest', verbose_name='Demande liée')),
            ],
            options={
                'verbose_name': 'Historique de localisation',
                'verbose_name_plural': 'Historiques de localisation',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GeolocationAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('alert_type', models.CharField(choices=[('technician_nearby', 'Technicien à proximité'), ('client_nearby', 'Client à proximité'), ('zone_entered', 'Entrée dans une zone'), ('zone_exited', "Sortie d'une zone"), ('route_deviation', "Déviation d'itinéraire"), ('location_accuracy_low', 'Précision GPS faible'), ('battery_low', 'Batterie faible'), ('speed_limit_exceeded', 'Limite de vitesse dépassée'), ('unusual_movement', 'Mouvement inhabituel'), ('location_timeout', 'Timeout de localisation')], max_length=30, verbose_name="Type d'alerte")),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('message', models.TextField(verbose_name='Message')),
                ('severity', models.CharField(choices=[('info', 'Information'), ('warning', 'Avertissement'), ('critical', 'Critique')], default='info', max_length=20, verbose_name='Sévérité')),
                ('is_read', models.BooleanField(default=False, verbose_name='Lue')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lue le')),
                ('latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude')),
                ('longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude')),
                ('extra_data', models.JSONField(blank=True, default=dict, verbose_name='Données supplémentaires')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='geolocation_alerts', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='geolocation_alerts', to='depannage.repairrequest', verbose_name='Demande')),
            ],
            options={
                'verbose_name': 'Alerte de géolocalisation',
                'verbose_name_plural': 'Alertes de géolocalisation',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='conversation',
            name='request',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='conversation', to='depannage.repairrequest'),
        ),
        migrations.CreateModel(
            name='CinetPayPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(max_length=100, unique=True, verbose_name='ID Transaction')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant')),
                ('currency', models.CharField(default='XOF', max_length=3, verbose_name='Devise')),
                ('description', models.TextField(verbose_name='Description')),
                ('customer_name', models.CharField(max_length=100, verbose_name='Nom client')),
                ('customer_surname', models.CharField(max_length=100, verbose_name='Prénom client')),
                ('customer_email', models.EmailField(max_length=254, verbose_name='Email client')),
                ('customer_phone_number', models.CharField(max_length=20, verbose_name='Téléphone client')),
                ('customer_address', models.CharField(max_length=200, verbose_name='Adresse client')),
                ('customer_city', models.CharField(max_length=100, verbose_name='Ville client')),
                ('customer_country', models.CharField(default='CI', max_length=2, verbose_name='Pays client')),
                ('customer_state', models.CharField(default='CI', max_length=2, verbose_name='État client')),
                ('customer_zip_code', models.CharField(max_length=10, verbose_name='Code postal client')),
                ('payment_token', models.CharField(blank=True, max_length=255, null=True, verbose_name='Token de paiement')),
                ('payment_url', models.URLField(blank=True, null=True, verbose_name='URL de paiement')),
                ('cinetpay_transaction_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='ID Transaction CinetPay')),
                ('notification_data', models.JSONField(blank=True, null=True, verbose_name='Notification brute CinetPay')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('success', 'Réussi'), ('failed', 'Échoué'), ('cancelled', 'Annulé')], default='pending', max_length=20, verbose_name='Statut')),
                ('metadata', models.TextField(blank=True, verbose_name='Métadonnées')),
                ('invoice_data', models.JSONField(blank=True, default=dict, verbose_name='Données facture')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Créé le')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Modifié le')),
                ('paid_at', models.DateTimeField(blank=True, null=True, verbose_name='Payé le')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cinetpay_payments', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cinetpay_payments', to='depannage.repairrequest')),
            ],
            options={
                'verbose_name': 'Paiement CinetPay',
                'verbose_name_plural': 'Paiements CinetPay',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='chatconversation',
            name='request',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='chat_conversation', to='depannage.repairrequest'),
        ),
        migrations.CreateModel(
            name='AdminNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('severity', models.CharField(choices=[('info', 'Info'), ('warning', 'Avertissement'), ('critical', 'Critique')], max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('related_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='depannage.repairrequest')),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('resolved', 'Résolu'), ('rejected', 'Rejeté')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='depannage.repairrequest')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports_reviewed', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_sent', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RequestDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('file', models.FileField(upload_to=depannage.models.RequestDocument.get_upload_path, verbose_name='Fichier')),
                ('document_type', models.CharField(choices=[('photo_before', 'Photo avant'), ('photo_after', 'Photo après'), ('invoice', 'Facture'), ('estimate', 'Devis'), ('other', 'Autre')], default='other', max_length=20, verbose_name='Type de document')),
                ('description', models.CharField(blank=True, max_length=200, verbose_name='Description')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='depannage.repairrequest')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Note')),
                ('comment', models.TextField(blank=True, verbose_name='Commentaire')),
                ('would_recommend', models.BooleanField(default=True, verbose_name='Recommanderait')),
                ('is_visible', models.BooleanField(default=True, verbose_name='Visible')),
                ('punctuality_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Ponctualité')),
                ('quality_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Qualité du travail')),
                ('communication_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Communication')),
                ('professionalism_rating', models.PositiveSmallIntegerField(blank=True, help_text='Attitude professionnelle, respect, propreté', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Professionnalisme')),
                ('problem_solving_rating', models.PositiveSmallIntegerField(blank=True, help_text='Capacité à diagnostiquer et résoudre le problème', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Résolution de problème')),
                ('cleanliness_rating', models.PositiveSmallIntegerField(blank=True, help_text="Propreté du travail et de l'environnement", null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Propreté')),
                ('price_fairness_rating', models.PositiveSmallIntegerField(blank=True, help_text='Prix justifié par rapport au travail effectué', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Justesse du prix')),
                ('intervention_duration_minutes', models.PositiveIntegerField(blank=True, help_text="Durée réelle de l'intervention", null=True, verbose_name="Durée de l'intervention (minutes)")),
                ('was_urgent', models.BooleanField(default=False, help_text="L'intervention était-elle urgente ?", verbose_name='Intervention urgente')),
                ('problem_complexity', models.CharField(blank=True, choices=[('simple', 'Simple'), ('moderate', 'Modérée'), ('complex', 'Complexe'), ('very_complex', 'Très complexe')], max_length=20, null=True, verbose_name='Complexité du problème')),
                ('parts_used', models.BooleanField(default=False, help_text='Des pièces ont-elles été utilisées ?', verbose_name='Pièces utilisées')),
                ('warranty_offered', models.BooleanField(default=False, help_text='Une garantie a-t-elle été offerte ?', verbose_name='Garantie offerte')),
                ('warranty_duration_days', models.PositiveIntegerField(blank=True, null=True, verbose_name='Durée de garantie (jours)')),
                ('positive_aspects', models.TextField(blank=True, help_text="Ce qui s'est bien passé", verbose_name='Points positifs')),
                ('improvement_suggestions', models.TextField(blank=True, help_text='Ce qui pourrait être amélioré', verbose_name="Suggestions d'amélioration")),
                ('would_use_again', models.BooleanField(default=True, help_text='Utiliserait ce technicien à nouveau', verbose_name='Utiliserait à nouveau')),
                ('would_recommend_to_friends', models.BooleanField(default=True, help_text='Recommanderait ce technicien à des amis', verbose_name='Recommanderait à des amis')),
                ('review_quality_score', models.FloatField(blank=True, help_text="Score calculé automatiquement basé sur la détail de l'avis", null=True, verbose_name="Score de qualité de l'avis")),
                ('is_verified_review', models.BooleanField(default=False, help_text="Avis vérifié par l'équipe de modération", verbose_name='Avis vérifié')),
                ('moderation_status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvé'), ('rejected', 'Rejeté'), ('flagged', 'Signalé')], default='pending', max_length=20, verbose_name='Statut de modération')),
                ('moderation_notes', models.TextField(blank=True, help_text="Notes de l'équipe de modération", verbose_name='Notes de modération')),
                ('tags', models.JSONField(blank=True, default=list, help_text="Tags pour catégoriser l'avis (ex: ['rapide', 'professionnel', 'cher'])", verbose_name='Tags')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_given', to='depannage.client')),
                ('request', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review', to='depannage.repairrequest')),
            ],
            options={
                'verbose_name': 'Avis',
                'verbose_name_plural': 'Avis',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewModeration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvé'), ('rejected', 'Rejeté'), ('flagged', 'Signalé')], default='pending', max_length=20, verbose_name='Statut')),
                ('moderation_reason', models.CharField(blank=True, choices=[('inappropriate_content', 'Contenu inapproprié'), ('fake_review', 'Avis factice'), ('spam', 'Spam'), ('offensive_language', 'Langage offensant'), ('irrelevant', 'Non pertinent'), ('duplicate', 'Doublon'), ('other', 'Autre')], max_length=50, null=True, verbose_name='Raison de modération')),
                ('moderation_notes', models.TextField(blank=True, verbose_name='Notes de modération')),
                ('auto_moderation_score', models.FloatField(blank=True, help_text='Score calculé automatiquement pour la modération', null=True, verbose_name='Score de modération automatique')),
                ('flagged_by_users', models.ManyToManyField(blank=True, help_text='Utilisateurs ayant signalé cet avis', related_name='flagged_reviews', to=settings.AUTH_USER_MODEL)),
                ('moderator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_reviews', to=settings.AUTH_USER_MODEL)),
                ('review', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='moderation', to='depannage.review')),
            ],
            options={
                'verbose_name': "Modération d'avis",
                'verbose_name_plural': "Modérations d'avis",
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RewardClaim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('points_spent', models.PositiveIntegerField(verbose_name='Points dépensés')),
                ('used_at', models.DateTimeField(blank=True, null=True, verbose_name='Utilisée le')),
                ('loyalty_program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reward_claims', to='depannage.loyaltyprogram')),
                ('repair_request', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reward_claims', to='depannage.repairrequest')),
                ('reward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claims', to='depannage.reward')),
            ],
            options={
                'verbose_name': 'Récompense réclamée',
                'verbose_name_plural': 'Récompenses réclamées',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StatisticsAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('threshold_exceeded', 'Threshold Exceeded'), ('anomaly', 'Anomaly'), ('info', 'Info'), ('warning', 'Warning'), ('error', 'Error')], default='info', max_length=32)),
                ('title', models.CharField(max_length=128)),
                ('message', models.TextField()),
                ('severity', models.CharField(default='info', max_length=16)),
                ('is_active', models.BooleanField(default=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_alerts', to=settings.AUTH_USER_MODEL)),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='triggered_alerts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StatisticsDashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('description', models.TextField(blank=True)),
                ('dashboard_type', models.CharField(choices=[('admin', 'Admin'), ('technician', 'Technician'), ('client', 'Client')], default='admin', max_length=32)),
                ('layout_config', models.JSONField(blank=True, default=dict)),
                ('widgets_config', models.JSONField(blank=True, default=list)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StatisticsExport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('export_type', models.CharField(choices=[('excel', 'Excel'), ('csv', 'CSV'), ('pdf', 'PDF')], default='excel', max_length=16)),
                ('export_config', models.JSONField(blank=True, default=dict)),
                ('status', models.CharField(default='pending', max_length=32)),
                ('file_path', models.CharField(blank=True, max_length=256)),
                ('file_size_bytes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StatisticsWidget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
                ('widget_type', models.CharField(choices=[('metric', 'Metric'), ('chart', 'Chart'), ('table', 'Table'), ('custom', 'Custom')], default='metric', max_length=32)),
                ('data_source', models.CharField(max_length=128)),
                ('config', models.JSONField(blank=True, default=dict)),
                ('position_x', models.PositiveIntegerField(default=0)),
                ('position_y', models.PositiveIntegerField(default=0)),
                ('width', models.PositiveIntegerField(default=1)),
                ('height', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='widgets', to='depannage.statisticsdashboard')),
            ],
        ),
        migrations.CreateModel(
            name='Technician',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('specialty', models.CharField(choices=[('electrician', 'Électricien'), ('plumber', 'Plombier'), ('mechanic', 'Mécanicien'), ('it', 'Informatique'), ('air_conditioning', 'Climatisation'), ('appliance_repair', 'Électroménager'), ('locksmith', 'Serrurier'), ('other', 'Autre')], default='other', max_length=50, verbose_name='Spécialité')),
                ('phone', models.CharField(max_length=20, verbose_name='Téléphone')),
                ('is_available', models.BooleanField(default=True, verbose_name='Disponible')),
                ('is_verified', models.BooleanField(default=False, verbose_name='Vérifié')),
                ('years_experience', models.PositiveIntegerField(default=0, verbose_name="Années d'expérience")),
                ('experience_level', models.CharField(choices=[('junior', 'Junior (0-2 ans)'), ('intermediate', 'Intermédiaire (2-5 ans)'), ('senior', 'Senior (5-10 ans)'), ('expert', 'Expert (10+ ans)')], default='junior', max_length=20, verbose_name="Niveau d'expérience")),
                ('hourly_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, verbose_name='Tarif horaire (FCFA)')),
                ('last_position_update', models.DateTimeField(blank=True, null=True, verbose_name='Dernière mise à jour de position')),
                ('current_latitude', models.FloatField(blank=True, null=True, verbose_name='Latitude actuelle')),
                ('current_longitude', models.FloatField(blank=True, null=True, verbose_name='Longitude actuelle')),
                ('is_available_urgent', models.BooleanField(default=False, verbose_name='Disponible pour urgence')),
                ('response_time_minutes', models.PositiveIntegerField(default=30, verbose_name='Temps de réponse moyen (minutes)')),
                ('badge_level', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Argent'), ('gold', 'Or'), ('platinum', 'Platine')], default='bronze', max_length=20, verbose_name='Niveau de badge')),
                ('service_radius_km', models.PositiveIntegerField(default=10, verbose_name="Rayon d'intervention (km)")),
                ('bio', models.TextField(blank=True, verbose_name='Présentation')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='technician_depannage', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Technicien',
                'verbose_name_plural': 'Techniciens',
                'ordering': ['-is_verified', '-years_experience'],
            },
        ),
        migrations.CreateModel(
            name='ServiceZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('center_latitude', models.FloatField(verbose_name='Latitude du centre')),
                ('center_longitude', models.FloatField(verbose_name='Longitude du centre')),
                ('radius_km', models.FloatField(verbose_name='Rayon (km)')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('color', models.CharField(default='#2563eb', max_length=7, verbose_name='Couleur')),
                ('technicians', models.ManyToManyField(related_name='service_zones', to='depannage.technician', verbose_name='Techniciens')),
            ],
            options={
                'verbose_name': 'Zone de service',
                'verbose_name_plural': 'Zones de service',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Route',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('name', models.CharField(max_length=200, verbose_name='Nom')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('start_latitude', models.FloatField(verbose_name='Latitude de départ')),
                ('start_longitude', models.FloatField(verbose_name='Longitude de départ')),
                ('end_latitude', models.FloatField(verbose_name="Latitude d'arrivée")),
                ('end_longitude', models.FloatField(verbose_name="Longitude d'arrivée")),
                ('distance_km', models.FloatField(blank=True, null=True, verbose_name='Distance (km)')),
                ('estimated_duration_minutes', models.PositiveIntegerField(blank=True, null=True, verbose_name='Durée estimée (minutes)')),
                ('route_type', models.CharField(choices=[('driving', 'Voiture'), ('walking', 'À pied'), ('bicycling', 'Vélo'), ('transit', 'Transport en commun')], default='driving', max_length=20, verbose_name="Type d'itinéraire")),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='routes', to='depannage.repairrequest', verbose_name='Demande')),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='routes', to='depannage.technician', verbose_name='Technicien')),
            ],
            options={
                'verbose_name': 'Itinéraire',
                'verbose_name_plural': 'Itinéraires',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('total_reviews', models.PositiveIntegerField(default=0, verbose_name='Total avis')),
                ('average_rating', models.FloatField(default=0.0, verbose_name='Note moyenne')),
                ('rating_distribution', models.JSONField(default=dict, help_text="{'1': 0, '2': 0, '3': 0, '4': 0, '5': 0}", verbose_name='Distribution des notes')),
                ('avg_punctuality', models.FloatField(default=0.0, verbose_name='Ponctualité moyenne')),
                ('avg_quality', models.FloatField(default=0.0, verbose_name='Qualité moyenne')),
                ('avg_communication', models.FloatField(default=0.0, verbose_name='Communication moyenne')),
                ('avg_professionalism', models.FloatField(default=0.0, verbose_name='Professionnalisme moyen')),
                ('avg_problem_solving', models.FloatField(default=0.0, verbose_name='Résolution problème moyenne')),
                ('avg_cleanliness', models.FloatField(default=0.0, verbose_name='Propreté moyenne')),
                ('avg_price_fairness', models.FloatField(default=0.0, verbose_name='Justesse prix moyenne')),
                ('recommendation_rate', models.FloatField(default=0.0, verbose_name='Taux de recommandation (%)')),
                ('reuse_rate', models.FloatField(default=0.0, verbose_name='Taux de réutilisation (%)')),
                ('friend_recommendation_rate', models.FloatField(default=0.0, verbose_name='Taux recommandation amis (%)')),
                ('detailed_reviews_count', models.PositiveIntegerField(default=0, verbose_name='Avis détaillés')),
                ('verified_reviews_count', models.PositiveIntegerField(default=0, verbose_name='Avis vérifiés')),
                ('avg_review_completeness', models.FloatField(default=0.0, verbose_name='Complétude moyenne (%)')),
                ('monthly_reviews', models.JSONField(default=dict, help_text="{'2024-01': 5, '2024-02': 8, ...}", verbose_name='Avis par mois')),
                ('rating_trend', models.JSONField(default=list, help_text="[{'date': '2024-01', 'avg': 4.2}, ...]", verbose_name='Tendance des notes')),
                ('popular_tags', models.JSONField(default=list, help_text="[{'tag': 'professionnel', 'count': 15}, ...]", verbose_name='Tags populaires')),
                ('last_calculation', models.DateTimeField(auto_now=True, verbose_name='Dernier calcul')),
                ('technician', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='review_analytics', to='depannage.technician')),
            ],
            options={
                'verbose_name': "Analytics d'avis",
                'verbose_name_plural': "Analytics d'avis",
                'ordering': ['-last_calculation'],
            },
        ),
        migrations.AddField(
            model_name='review',
            name='technician',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_received', to='depannage.technician'),
        ),
        migrations.AddField(
            model_name='repairrequest',
            name='technician',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='repair_requests', to='depannage.technician'),
        ),
        migrations.CreateModel(
            name='TechnicianLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('latitude', models.FloatField(verbose_name='Latitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('accuracy', models.FloatField(blank=True, help_text='Précision GPS en mètres', null=True, verbose_name='Précision (mètres)')),
                ('altitude', models.FloatField(blank=True, help_text='Altitude en mètres', null=True, verbose_name='Altitude (mètres)')),
                ('speed', models.FloatField(blank=True, help_text='Vitesse de déplacement en km/h', null=True, verbose_name='Vitesse (km/h)')),
                ('heading', models.FloatField(blank=True, help_text='Direction en degrés (0-360)', null=True, verbose_name='Direction (degrés)')),
                ('is_moving', models.BooleanField(default=False, help_text='Indique si le technicien est en mouvement', verbose_name='En mouvement')),
                ('battery_level', models.PositiveSmallIntegerField(blank=True, help_text='Niveau de batterie du dispositif', null=True, verbose_name='Niveau de batterie (%)')),
                ('location_source', models.CharField(choices=[('gps', 'GPS'), ('network', 'Réseau cellulaire'), ('wifi', 'WiFi'), ('manual', 'Manuel')], default='gps', help_text='Source de la localisation', max_length=20, verbose_name='Source de localisation')),
                ('address', models.TextField(blank=True, help_text='Adresse géocodée', verbose_name='Adresse')),
                ('city', models.CharField(blank=True, help_text='Ville de localisation', max_length=100, verbose_name='Ville')),
                ('country', models.CharField(default='CI', help_text='Code pays ISO', max_length=2, verbose_name='Pays')),
                ('technician', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='location', to='depannage.technician')),
            ],
            options={
                'verbose_name': 'Localisation de technicien',
                'verbose_name_plural': 'Localisations des techniciens',
            },
        ),
        migrations.CreateModel(
            name='TechnicianSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_name', models.CharField(default='Standard', max_length=100)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('payment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subscription_payments', to='depannage.cinetpaypayment')),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='depannage.technician')),
            ],
            options={
                'verbose_name': 'Abonnement technicien',
                'verbose_name_plural': 'Abonnements techniciens',
                'ordering': ['-end_date'],
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPaymentRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Montant')),
                ('duration_months', models.PositiveIntegerField(default=1, verbose_name='Durée en mois')),
                ('payment_method', models.CharField(default='manual_validation', max_length=50, verbose_name='Méthode de paiement')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('status', models.CharField(choices=[('pending', 'En attente de validation'), ('approved', 'Approuvé'), ('rejected', 'Rejeté'), ('cancelled', 'Annulé')], default='pending', max_length=20, verbose_name='Statut')),
                ('validated_at', models.DateTimeField(blank=True, null=True, verbose_name='Validé le')),
                ('validation_notes', models.TextField(blank=True, verbose_name='Notes de validation')),
                ('validated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='validated_subscription_requests', to=settings.AUTH_USER_MODEL)),
                ('technician', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_payment_requests', to='depannage.technician')),
                ('subscription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payment_request', to='depannage.techniciansubscription')),
            ],
            options={
                'verbose_name': "Demande de paiement d'abonnement",
                'verbose_name_plural': "Demandes de paiement d'abonnement",
            },
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['conversation', 'created_at'], name='depannage_c_convers_f980d3_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['sender', 'created_at'], name='depannage_c_sender__09c0de_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['is_read', 'sender'], name='depannage_c_is_read_a45580_idx'),
        ),
        migrations.AddConstraint(
            model_name='chatmessage',
            constraint=models.CheckConstraint(condition=models.Q(('voice_duration__isnull', True), ('voice_duration__gte', 1), _connector='OR'), name='voice_duration_positive'),
        ),
        migrations.AddConstraint(
            model_name='chatmessage',
            constraint=models.CheckConstraint(condition=models.Q(('message_type', 'location'), ('latitude__isnull', True), _connector='OR'), name='location_coords_only_for_location_messages'),
        ),
        migrations.AddConstraint(
            model_name='chatmessage',
            constraint=models.CheckConstraint(condition=models.Q(('message_type', 'location'), ('longitude__isnull', True), _connector='OR'), name='location_coords_only_for_location_messages_long'),
        ),
        migrations.AddIndex(
            model_name='client',
            index=models.Index(fields=['is_active'], name='depannage_c_is_acti_b3982b_idx'),
        ),
        migrations.AddIndex(
            model_name='client',
            index=models.Index(fields=['created_at'], name='depannage_c_created_f3eebf_idx'),
        ),
        migrations.AddIndex(
            model_name='clientlocation',
            index=models.Index(fields=['client', 'created_at'], name='depannage_c_client__1b4da8_idx'),
        ),
        migrations.AddIndex(
            model_name='clientlocation',
            index=models.Index(fields=['latitude', 'longitude'], name='depannage_c_latitud_ff6704_idx'),
        ),
        migrations.AddConstraint(
            model_name='clientlocation',
            constraint=models.CheckConstraint(condition=models.Q(('accuracy__isnull', True), ('accuracy__gte', 0), _connector='OR'), name='client_location_accuracy_positive'),
        ),
        migrations.AddConstraint(
            model_name='clientlocation',
            constraint=models.CheckConstraint(condition=models.Q(('speed__isnull', True), ('speed__gte', 0), _connector='OR'), name='client_location_speed_positive'),
        ),
        migrations.AddConstraint(
            model_name='clientlocation',
            constraint=models.CheckConstraint(condition=models.Q(('heading__isnull', True), models.Q(('heading__gte', 0), ('heading__lte', 360)), _connector='OR'), name='client_location_heading_valid'),
        ),
        migrations.AddConstraint(
            model_name='clientlocation',
            constraint=models.CheckConstraint(condition=models.Q(('battery_level__isnull', True), models.Q(('battery_level__gte', 0), ('battery_level__lte', 100)), _connector='OR'), name='client_location_battery_valid'),
        ),
        migrations.AddIndex(
            model_name='communicationnotification',
            index=models.Index(fields=['recipient', 'is_read'], name='depannage_c_recipie_eca5f5_idx'),
        ),
        migrations.AddIndex(
            model_name='communicationsession',
            index=models.Index(fields=['user', 'is_active'], name='depannage_c_user_id_4c7c7d_idx'),
        ),
        migrations.AddConstraint(
            model_name='geolocationsettings',
            constraint=models.CheckConstraint(condition=models.Q(('location_update_interval_seconds__gte', 5)), name='geo_settings_update_interval_min'),
        ),
        migrations.AddConstraint(
            model_name='geolocationsettings',
            constraint=models.CheckConstraint(condition=models.Q(('max_location_history_days__gte', 1)), name='geo_settings_history_days_min'),
        ),
        migrations.AddConstraint(
            model_name='geolocationsettings',
            constraint=models.CheckConstraint(condition=models.Q(('battery_threshold_percent__gte', 0), ('battery_threshold_percent__lte', 100)), name='geo_settings_battery_threshold_valid'),
        ),
        migrations.AddConstraint(
            model_name='geolocationsettings',
            constraint=models.CheckConstraint(condition=models.Q(('accuracy_threshold_meters__gte', 1)), name='geo_settings_accuracy_threshold_min'),
        ),
        migrations.AddConstraint(
            model_name='geolocationsettings',
            constraint=models.CheckConstraint(condition=models.Q(('default_zoom_level__gte', 1), ('default_zoom_level__lte', 20)), name='geo_settings_zoom_level_valid'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status', 'created_at'], name='depannage_p_status_81f0df_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payer', 'status'], name='depannage_p_payer_i_614749_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['recipient', 'status'], name='depannage_p_recipie_c0306b_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient', 'is_read', '-created_at'], name='depannage_n_recipie_581080_idx'),
        ),
        migrations.AddIndex(
            model_name='locationhistory',
            index=models.Index(fields=['user', 'created_at'], name='depannage_l_user_id_8017f9_idx'),
        ),
        migrations.AddIndex(
            model_name='locationhistory',
            index=models.Index(fields=['request', 'created_at'], name='depannage_l_request_bcadf4_idx'),
        ),
        migrations.AddConstraint(
            model_name='locationhistory',
            constraint=models.CheckConstraint(condition=models.Q(('accuracy__isnull', True), ('accuracy__gte', 0), _connector='OR'), name='location_history_accuracy_positive'),
        ),
        migrations.AddConstraint(
            model_name='locationhistory',
            constraint=models.CheckConstraint(condition=models.Q(('speed__isnull', True), ('speed__gte', 0), _connector='OR'), name='location_history_speed_positive'),
        ),
        migrations.AddIndex(
            model_name='geolocationalert',
            index=models.Index(fields=['user', 'is_read'], name='depannage_g_user_id_f3ca52_idx'),
        ),
        migrations.AddIndex(
            model_name='geolocationalert',
            index=models.Index(fields=['alert_type', 'created_at'], name='depannage_g_alert_t_ea184c_idx'),
        ),
        migrations.AddIndex(
            model_name='chatconversation',
            index=models.Index(fields=['client', 'last_message_at'], name='depannage_c_client__41186a_idx'),
        ),
        migrations.AddIndex(
            model_name='chatconversation',
            index=models.Index(fields=['technician', 'last_message_at'], name='depannage_c_technic_e2bf2e_idx'),
        ),
        migrations.AddIndex(
            model_name='chatconversation',
            index=models.Index(fields=['is_active', 'last_message_at'], name='depannage_c_is_acti_1d3376_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chatconversation',
            unique_together={('client', 'technician')},
        ),
        migrations.AddIndex(
            model_name='technician',
            index=models.Index(fields=['is_available'], name='depannage_t_is_avai_e90263_idx'),
        ),
        migrations.AddIndex(
            model_name='technician',
            index=models.Index(fields=['is_verified'], name='depannage_t_is_veri_1b5b31_idx'),
        ),
        migrations.AddIndex(
            model_name='technician',
            index=models.Index(fields=['specialty'], name='depannage_t_special_d85608_idx'),
        ),
        migrations.AddIndex(
            model_name='technician',
            index=models.Index(fields=['experience_level'], name='depannage_t_experie_f8737d_idx'),
        ),
        migrations.AddIndex(
            model_name='technician',
            index=models.Index(fields=['is_available_urgent'], name='depannage_t_is_avai_b2acf0_idx'),
        ),
        migrations.AddIndex(
            model_name='technician',
            index=models.Index(fields=['current_latitude', 'current_longitude'], name='depannage_t_current_410ade_idx'),
        ),
        migrations.AddIndex(
            model_name='technician',
            index=models.Index(fields=['last_position_update'], name='depannage_t_last_po_83a09b_idx'),
        ),
        migrations.AddIndex(
            model_name='technician',
            index=models.Index(fields=['badge_level'], name='depannage_t_badge_l_d0237d_idx'),
        ),
        migrations.AddIndex(
            model_name='technician',
            index=models.Index(fields=['service_radius_km'], name='depannage_t_service_9e3055_idx'),
        ),
        migrations.AddIndex(
            model_name='servicezone',
            index=models.Index(fields=['center_latitude', 'center_longitude'], name='depannage_s_center__7cb6b6_idx'),
        ),
        migrations.AddIndex(
            model_name='servicezone',
            index=models.Index(fields=['is_active'], name='depannage_s_is_acti_6ce743_idx'),
        ),
        migrations.AddConstraint(
            model_name='servicezone',
            constraint=models.CheckConstraint(condition=models.Q(('radius_km__gt', 0)), name='service_zone_radius_positive'),
        ),
        migrations.AddIndex(
            model_name='route',
            index=models.Index(fields=['request', 'created_at'], name='depannage_r_request_5e8183_idx'),
        ),
        migrations.AddIndex(
            model_name='route',
            index=models.Index(fields=['technician', 'created_at'], name='depannage_r_technic_9f3a9d_idx'),
        ),
        migrations.AddConstraint(
            model_name='route',
            constraint=models.CheckConstraint(condition=models.Q(('distance_km__isnull', True), ('distance_km__gte', 0), _connector='OR'), name='route_distance_positive'),
        ),
        migrations.AddConstraint(
            model_name='route',
            constraint=models.CheckConstraint(condition=models.Q(('estimated_duration_minutes__isnull', True), ('estimated_duration_minutes__gte', 0), _connector='OR'), name='route_duration_positive'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['technician', 'rating'], name='depannage_r_technic_ded217_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_at'], name='depannage_r_created_314e9e_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['moderation_status'], name='depannage_r_moderat_56a939_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_verified_review'], name='depannage_r_is_veri_3ffa64_idx'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('request',), name='unique_review_per_request'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['status'], name='depannage_r_status_e38578_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['specialty_needed'], name='depannage_r_special_f93669_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['urgency_level'], name='depannage_r_urgency_e7db4f_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['priority'], name='depannage_r_priorit_f2353c_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['created_at'], name='depannage_r_created_554882_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['assigned_at'], name='depannage_r_assigne_e3ad1c_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['completed_at'], name='depannage_r_complet_2d7647_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['latitude', 'longitude'], name='depannage_r_latitud_a98f9e_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['client'], name='depannage_r_client__db3942_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['technician'], name='depannage_r_technic_cbf7db_idx'),
        ),
        migrations.AddIndex(
            model_name='repairrequest',
            index=models.Index(fields=['mission_validated'], name='depannage_r_mission_4aec60_idx'),
        ),
        migrations.AddIndex(
            model_name='technicianlocation',
            index=models.Index(fields=['technician', 'created_at'], name='depannage_t_technic_623ea6_idx'),
        ),
        migrations.AddIndex(
            model_name='technicianlocation',
            index=models.Index(fields=['latitude', 'longitude'], name='depannage_t_latitud_fbbc7a_idx'),
        ),
        migrations.AddIndex(
            model_name='technicianlocation',
            index=models.Index(fields=['is_moving', 'created_at'], name='depannage_t_is_movi_6b2d4b_idx'),
        ),
        migrations.AddConstraint(
            model_name='technicianlocation',
            constraint=models.CheckConstraint(condition=models.Q(('accuracy__isnull', True), ('accuracy__gte', 0), _connector='OR'), name='tech_location_accuracy_positive'),
        ),
        migrations.AddConstraint(
            model_name='technicianlocation',
            constraint=models.CheckConstraint(condition=models.Q(('speed__isnull', True), ('speed__gte', 0), _connector='OR'), name='tech_location_speed_positive'),
        ),
        migrations.AddConstraint(
            model_name='technicianlocation',
            constraint=models.CheckConstraint(condition=models.Q(('heading__isnull', True), models.Q(('heading__gte', 0), ('heading__lte', 360)), _connector='OR'), name='tech_location_heading_valid'),
        ),
        migrations.AddConstraint(
            model_name='technicianlocation',
            constraint=models.CheckConstraint(condition=models.Q(('battery_level__isnull', True), models.Q(('battery_level__gte', 0), ('battery_level__lte', 100)), _connector='OR'), name='tech_location_battery_valid'),
        ),
        migrations.AlterUniqueTogether(
            name='techniciansubscription',
            unique_together={('technician', 'start_date', 'end_date')},
        ),
    ]
