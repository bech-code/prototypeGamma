#!/usr/bin/env python3
"""
Script complet de nettoyage et red√©marrage pour r√©soudre les probl√®mes de tokens.
Ce script nettoie tous les tokens expir√©s et red√©marre le serveur proprement.
"""

import os
import sys
import django
import subprocess
import time
from datetime import datetime, timedelta

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'auth.settings')
django.setup()

from django.contrib.sessions.models import Session
from django.utils import timezone

def print_status(message):
    print(f"‚úÖ {message}")

def print_warning(message):
    print(f"‚ö†Ô∏è  {message}")

def print_error(message):
    print(f"‚ùå {message}")

def print_info(message):
    print(f"‚ÑπÔ∏è  {message}")

def clean_all_tokens():
    """Nettoie tous les tokens et sessions."""
    print_info("Nettoyage complet des tokens et sessions...")
    
    # Nettoyer les sessions expir√©es
    expired_sessions = Session.objects.filter(expire_date__lt=timezone.now())
    session_count = expired_sessions.count()
    expired_sessions.delete()
    print_status(f"{session_count} sessions expir√©es supprim√©es")
    
    # Nettoyer les tokens JWT expir√©s
    try:
        from rest_framework_simplejwt.token_blacklist.models import OutstandingToken
        expired_tokens = OutstandingToken.objects.filter(expires_at__lt=timezone.now())
        token_count = expired_tokens.count()
        expired_tokens.delete()
        print_status(f"{token_count} tokens JWT expir√©s supprim√©s")
    except ImportError:
        print_warning("Blacklist JWT non activ√©e")
    except Exception as e:
        print_error(f"Erreur lors du nettoyage des tokens JWT: {e}")
    
    # Nettoyer les anciennes notifications
    try:
        from depannage.models import Notification
        thirty_days_ago = timezone.now() - timedelta(days=30)
        old_notifications = Notification.objects.filter(
            created_at__lt=thirty_days_ago,
            is_read=True
        )
        notif_count = old_notifications.count()
        old_notifications.delete()
        print_status(f"{notif_count} anciennes notifications supprim√©es")
    except Exception as e:
        print_error(f"Erreur lors du nettoyage des notifications: {e}")

def stop_server():
    """Arr√™te le serveur Django s'il tourne."""
    print_info("Arr√™t du serveur Django...")
    
    try:
        # Chercher et tuer les processus Django
        result = subprocess.run(['pkill', '-f', 'python manage.py runserver'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print_status("Serveur Django arr√™t√©")
        else:
            print_warning("Aucun serveur Django en cours d'ex√©cution")
    except Exception as e:
        print_error(f"Erreur lors de l'arr√™t du serveur: {e}")
    
    # Attendre un peu pour s'assurer que le serveur est arr√™t√©
    time.sleep(2)

def start_server():
    """D√©marre le serveur Django."""
    print_info("D√©marrage du serveur Django...")
    
    try:
        # D√©marrer le serveur en arri√®re-plan
        process = subprocess.Popen(['python', 'manage.py', 'runserver'], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE)
        
        # Attendre un peu pour que le serveur d√©marre
        time.sleep(3)
        
        # V√©rifier si le processus est toujours en cours
        if process.poll() is None:
            print_status("Serveur Django d√©marr√© avec succ√®s")
            print_info("URL: http://127.0.0.1:8000")
            return process
        else:
            stdout, stderr = process.communicate()
            print_error(f"Erreur lors du d√©marrage du serveur: {stderr.decode()}")
            return None
    except Exception as e:
        print_error(f"Erreur lors du d√©marrage du serveur: {e}")
        return None

def test_endpoints():
    """Teste les endpoints principaux."""
    print_info("Test des endpoints...")
    
    import requests
    
    endpoints = [
        ("Health Check", "http://127.0.0.1:8000/depannage/api/test/health-check/"),
        ("API Info", "http://127.0.0.1:8000/depannage/api/test/api_info/"),
    ]
    
    for name, url in endpoints:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print_status(f"{name}: OK")
            else:
                print_warning(f"{name}: {response.status_code}")
        except Exception as e:
            print_error(f"{name}: Erreur - {e}")

def main():
    """Fonction principale."""
    print("üîß SCRIPT DE R√âSOLUTION COMPL√àTE - DepanneTeliman")
    print("=" * 60)
    print(f"‚è∞ Heure: {timezone.now()}")
    print()
    
    # √âtape 1: Nettoyer tous les tokens
    clean_all_tokens()
    print()
    
    # √âtape 2: Arr√™ter le serveur
    stop_server()
    print()
    
    # √âtape 3: D√©marrer le serveur
    server_process = start_server()
    print()
    
    if server_process:
        # √âtape 4: Tester les endpoints
        test_endpoints()
        print()
        
        print("=" * 60)
        print("üéâ R√âSOLUTION TERMIN√âE!")
        print()
        print("üìã Instructions pour le frontend:")
        print("   1. Ouvrir les DevTools (F12)")
        print("   2. Aller dans Application ‚Üí Local Storage")
        print("   3. Supprimer: token, refreshToken, user")
        print("   4. Recharger la page (F5)")
        print("   5. Se reconnecter")
        print()
        print("üîó URLs:")
        print("   Backend: http://127.0.0.1:8000")
        print("   Frontend: http://localhost:5173")
        print("   Admin: http://127.0.0.1:8000/admin/")
        print()
        print("üõë Pour arr√™ter le serveur: Ctrl+C")
        print()
        
        try:
            # Attendre que l'utilisateur arr√™te le script
            server_process.wait()
        except KeyboardInterrupt:
            print("\nüõë Arr√™t demand√© par l'utilisateur")
            server_process.terminate()
            print_status("Serveur arr√™t√© proprement")
    else:
        print_error("Impossible de d√©marrer le serveur")
        print_info("V√©rifiez les logs pour plus d'informations")

if __name__ == "__main__":
    main() 