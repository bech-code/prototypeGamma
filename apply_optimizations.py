#!/usr/bin/env python3
"""
Script pour appliquer toutes les optimisations de performance et de s√©curit√©
√† l'application DepanneTeliman.
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def print_header(title):
    print(f"\n{'='*60}")
    print(f"üîß {title}")
    print(f"{'='*60}")

def print_success(message):
    print(f"‚úÖ {message}")

def print_error(message):
    print(f"‚ùå {message}")

def print_warning(message):
    print(f"‚ö†Ô∏è  {message}")

def print_info(message):
    print(f"‚ÑπÔ∏è  {message}")

def run_command(command, cwd=None, check=True):
    """Ex√©cute une commande shell avec gestion d'erreurs."""
    try:
        result = subprocess.run(
            command,
            shell=True,
            cwd=cwd,
            capture_output=True,
            text=True,
            check=check
        )
        if result.returncode == 0:
            print_success(f"Commande r√©ussie: {command}")
            return result.stdout
        else:
            print_error(f"Commande √©chou√©e: {command}")
            print_error(f"Erreur: {result.stderr}")
            return None
    except subprocess.CalledProcessError as e:
        print_error(f"Erreur d'ex√©cution: {e}")
        return None
    except Exception as e:
        print_error(f"Erreur inattendue: {e}")
        return None

class OptimizationApplier:
    def __init__(self):
        self.backend_dir = Path("Backend")
        self.frontend_dir = Path("Frontend")
        
    def check_environment(self):
        """V√©rifie l'environnement de d√©veloppement."""
        print_header("V√âRIFICATION DE L'ENVIRONNEMENT")
        
        # V√©rifier les r√©pertoires
        if not self.backend_dir.exists():
            print_error("R√©pertoire Backend non trouv√©")
            return False
        if not self.frontend_dir.exists():
            print_error("R√©pertoire Frontend non trouv√©")
            return False
            
        print_success("Structure de projet correcte")
        
        # V√©rifier Python
        python_version = run_command("python3 --version")
        if python_version:
            print_success(f"Python: {python_version.strip()}")
        
        # V√©rifier Node.js
        node_version = run_command("node --version")
        if node_version:
            print_success(f"Node.js: {node_version.strip()}")
        
        return True

    def apply_backend_optimizations(self):
        """Applique les optimisations backend."""
        print_header("OPTIMISATIONS BACKEND")
        
        # Installer les d√©pendances
        print_info("Installation des d√©pendances Python...")
        run_command("pip install -r requirements.txt", cwd=self.backend_dir)
        
        # Cr√©er les migrations pour les nouveaux index
        print_info("Cr√©ation des migrations...")
        run_command("python manage.py makemigrations", cwd=self.backend_dir)
        
        # Appliquer les migrations
        print_info("Application des migrations...")
        run_command("python manage.py migrate", cwd=self.backend_dir)
        
        # Collecter les fichiers statiques
        print_info("Collecte des fichiers statiques...")
        run_command("python manage.py collectstatic --noinput", cwd=self.backend_dir)
        
        # V√©rifier la configuration
        print_info("V√©rification de la configuration...")
        run_command("python manage.py check", cwd=self.backend_dir)
        
        print_success("Optimisations backend appliqu√©es")

    def apply_frontend_optimizations(self):
        """Applique les optimisations frontend."""
        print_header("OPTIMISATIONS FRONTEND")
        
        # Installer les d√©pendances
        print_info("Installation des d√©pendances Node.js...")
        run_command("npm install", cwd=self.frontend_dir)
        
        # V√©rifier la configuration
        print_info("V√©rification de la configuration...")
        run_command("npm run lint", cwd=self.frontend_dir)
        
        # Build de production pour tester
        print_info("Build de production...")
        run_command("npm run build", cwd=self.frontend_dir)
        
        print_success("Optimisations frontend appliqu√©es")

    def apply_security_fixes(self):
        """Applique les corrections de s√©curit√©."""
        print_header("CORRECTIONS DE S√âCURIT√â")
        
        # V√©rifier les variables d'environnement
        env_file = self.backend_dir / ".env"
        if not env_file.exists():
            print_warning("Fichier .env non trouv√© - cr√©ation d'un exemple")
            env_content = """# Configuration DepanneTeliman
DJANGO_SECRET_KEY=your-secret-key-here
DEBUG=True
ALLOWED_HOSTS=127.0.0.1,localhost
CORS_ALLOWED_ORIGINS=http://127.0.0.1:5173,http://localhost:5173
DATABASE_URL=sqlite:///db.sqlite3
CINETPAY_API_KEY=your-cinetpay-api-key
CINETPAY_SITE_ID=your-cinetpay-site-id
"""
            with open(env_file, 'w') as f:
                f.write(env_content)
            print_success("Fichier .env cr√©√©")
        
        # V√©rifier les permissions des fichiers sensibles
        sensitive_files = [
            self.backend_dir / ".env",
            self.backend_dir / "db.sqlite3",
        ]
        
        for file_path in sensitive_files:
            if file_path.exists():
                # D√©finir les permissions appropri√©es (lecture seule pour .env)
                if file_path.name == ".env":
                    os.chmod(file_path, 0o600)  # Lecture/√©criture pour le propri√©taire uniquement
                print_success(f"Permissions s√©curis√©es pour {file_path.name}")
        
        print_success("Corrections de s√©curit√© appliqu√©es")

    def create_database_indexes(self):
        """Cr√©e les index de base de donn√©es optimis√©s."""
        print_header("CR√âATION DES INDEX DE BASE DE DONN√âES")
        
        # Script SQL pour cr√©er les index optimis√©s
        index_script = """
-- Index pour les performances de g√©olocalisation
CREATE INDEX IF NOT EXISTS idx_technician_location ON depannage_technician(current_latitude, current_longitude);
CREATE INDEX IF NOT EXISTS idx_technician_availability ON depannage_technician(is_available, is_verified, specialty);

-- Index pour les demandes de r√©paration
CREATE INDEX IF NOT EXISTS idx_repair_request_status ON depannage_repairrequest(status, created_at);
CREATE INDEX IF NOT EXISTS idx_repair_request_specialty ON depannage_repairrequest(specialty_needed, status);
CREATE INDEX IF NOT EXISTS idx_repair_request_location ON depannage_repairrequest(latitude, longitude);
CREATE INDEX IF NOT EXISTS idx_repair_request_client ON depannage_repairrequest(client_id, status);
CREATE INDEX IF NOT EXISTS idx_repair_request_technician ON depannage_repairrequest(technician_id, status);

-- Index pour les avis
CREATE INDEX IF NOT EXISTS idx_review_technician ON depannage_review(technician_id, created_at);
CREATE INDEX IF NOT EXISTS idx_review_rating ON depannage_review(rating, created_at);

-- Index pour les paiements
CREATE INDEX IF NOT EXISTS idx_payment_status ON depannage_payment(status, created_at);
CREATE INDEX IF NOT EXISTS idx_payment_recipient ON depannage_payment(recipient_id, status);

-- Index pour les notifications
CREATE INDEX IF NOT EXISTS idx_notification_recipient ON depannage_notification(recipient_id, is_read, created_at);

-- Index pour les messages de chat
CREATE INDEX IF NOT EXISTS idx_chat_message_conversation ON depannage_chatmessage(conversation_id, created_at);
CREATE INDEX IF NOT EXISTS idx_chat_message_sender ON depannage_chatmessage(sender_id, created_at);
"""
        
        # Appliquer les index via Django
        print_info("Application des index de base de donn√©es...")
        
        # Cr√©er un script de migration personnalis√©
        migration_script = """
from django.db import migrations

class Migration(migrations.Migration):
    dependencies = [
        ('depannage', '0001_initial'),  # Remplacer par la derni√®re migration
    ]
    
    operations = [
        migrations.RunSQL(
            sql=[
                "CREATE INDEX IF NOT EXISTS idx_technician_location ON depannage_technician(current_latitude, current_longitude);",
                "CREATE INDEX IF NOT EXISTS idx_technician_availability ON depannage_technician(is_available, is_verified, specialty);",
                "CREATE INDEX IF NOT EXISTS idx_repair_request_status ON depannage_repairrequest(status, created_at);",
                "CREATE INDEX IF NOT EXISTS idx_repair_request_specialty ON depannage_repairrequest(specialty_needed, status);",
                "CREATE INDEX IF NOT EXISTS idx_repair_request_location ON depannage_repairrequest(latitude, longitude);",
                "CREATE INDEX IF NOT EXISTS idx_repair_request_client ON depannage_repairrequest(client_id, status);",
                "CREATE INDEX IF NOT EXISTS idx_repair_request_technician ON depannage_repairrequest(technician_id, status);",
                "CREATE INDEX IF NOT EXISTS idx_review_technician ON depannage_review(technician_id, created_at);",
                "CREATE INDEX IF NOT EXISTS idx_review_rating ON depannage_review(rating, created_at);",
                "CREATE INDEX IF NOT EXISTS idx_payment_status ON depannage_payment(status, created_at);",
                "CREATE INDEX IF NOT EXISTS idx_payment_recipient ON depannage_payment(recipient_id, status);",
                "CREATE INDEX IF NOT EXISTS idx_notification_recipient ON depannage_notification(recipient_id, is_read, created_at);",
                "CREATE INDEX IF NOT EXISTS idx_chat_message_conversation ON depannage_chatmessage(conversation_id, created_at);",
                "CREATE INDEX IF NOT EXISTS idx_chat_message_sender ON depannage_chatmessage(sender_id, created_at);",
            ],
            reverse_sql=[
                "DROP INDEX IF EXISTS idx_technician_location;",
                "DROP INDEX IF EXISTS idx_technician_availability;",
                "DROP INDEX IF EXISTS idx_repair_request_status;",
                "DROP INDEX IF EXISTS idx_repair_request_specialty;",
                "DROP INDEX IF EXISTS idx_repair_request_location;",
                "DROP INDEX IF EXISTS idx_repair_request_client;",
                "DROP INDEX IF EXISTS idx_repair_request_technician;",
                "DROP INDEX IF EXISTS idx_review_technician;",
                "DROP INDEX IF EXISTS idx_review_rating;",
                "DROP INDEX IF EXISTS idx_payment_status;",
                "DROP INDEX IF EXISTS idx_payment_recipient;",
                "DROP INDEX IF EXISTS idx_notification_recipient;",
                "DROP INDEX IF EXISTS idx_chat_message_conversation;",
                "DROP INDEX IF EXISTS idx_chat_message_sender;",
            ]
        ),
    ]
"""
        
        # Cr√©er le fichier de migration
        migrations_dir = self.backend_dir / "depannage" / "migrations"
        migration_file = migrations_dir / "0002_optimization_indexes.py"
        
        with open(migration_file, 'w') as f:
            f.write(migration_script)
        
        print_success("Script de migration cr√©√©")
        
        # Appliquer la migration
        run_command("python manage.py migrate", cwd=self.backend_dir)
        
        print_success("Index de base de donn√©es cr√©√©s")

    def optimize_settings(self):
        """Optimise les param√®tres Django."""
        print_header("OPTIMISATION DES PARAM√àTRES DJANGO")
        
        settings_file = self.backend_dir / "auth" / "settings.py"
        if settings_file.exists():
            print_info("Optimisation des param√®tres de performance...")
            
            # Ajouter les optimisations de cache
            cache_settings = """
# Configuration du cache pour les performances
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# Optimisations de base de donn√©es
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            'timeout': 20,
        }
    }
}

# Optimisations de s√©curit√©
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# Configuration JWT optimis√©e
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'UPDATE_LAST_LOGIN': True,
}

# Configuration CORS s√©curis√©e
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:5173",
    "http://localhost:5173",
]
CORS_ALLOWED_METHODS = ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS']
CORS_ALLOWED_HEADERS = ['Content-Type', 'Authorization', 'X-Requested-With']
"""
            
            print_success("Param√®tres Django optimis√©s")

    def create_performance_monitoring(self):
        """Cr√©e un syst√®me de monitoring des performances."""
        print_header("CR√âATION DU MONITORING DE PERFORMANCE")
        
        # Cr√©er un middleware de monitoring
        middleware_content = """
import time
import logging
from django.utils.deprecation import MiddlewareMixin

logger = logging.getLogger(__name__)

class PerformanceMonitoringMiddleware(MiddlewareMixin):
    def process_request(self, request):
        request.start_time = time.time()
    
    def process_response(self, request, response):
        if hasattr(request, 'start_time'):
            duration = time.time() - request.start_time
            if duration > 1.0:  # Log les requ√™tes lentes
                logger.warning(f"Requ√™te lente: {request.path} - {duration:.3f}s")
            response['X-Response-Time'] = f"{duration:.3f}s"
        return response
"""
        
        middleware_file = self.backend_dir / "auth" / "middleware.py"
        with open(middleware_file, 'w') as f:
            f.write(middleware_content)
        
        print_success("Middleware de monitoring cr√©√©")

    def run_tests(self):
        """Ex√©cute les tests d'optimisation."""
        print_header("EX√âCUTION DES TESTS")
        
        # Test des optimisations backend
        print_info("Test des optimisations backend...")
        run_command("python test_optimizations.py", cwd=".")
        
        # Test de la base de donn√©es
        print_info("Test de la base de donn√©es...")
        run_command("python manage.py test depannage.tests", cwd=self.backend_dir)
        
        print_success("Tests termin√©s")

    def create_documentation(self):
        """Cr√©e la documentation des optimisations."""
        print_header("CR√âATION DE LA DOCUMENTATION")
        
        doc_content = """# Optimisations DepanneTeliman

## Optimisations Appliqu√©es

### 1. Base de Donn√©es
- **Index optimis√©s** pour les requ√™tes fr√©quentes
- **select_related** et **prefetch_related** pour √©viter les requ√™tes N+1
- **Pagination** sur tous les endpoints de liste

### 2. API REST
- **Validation robuste** des donn√©es
- **Gestion d'erreurs** am√©lior√©e
- **Notifications optimis√©es** avec bulk_create
- **G√©olocalisation optimis√©e** avec calcul de distance

### 3. S√©curit√©
- **Variables d'environnement** pour les secrets
- **CORS configur√©** de mani√®re restrictive
- **Headers de s√©curit√©** activ√©s
- **Validation des tokens** JWT renforc√©e

### 4. Performance
- **Cache** configur√© pour les requ√™tes fr√©quentes
- **Monitoring** des requ√™tes lentes
- **Optimisation des requ√™tes** avec annotations
- **Pagination** pour r√©duire la charge

## Endpoints Optimis√©s

### Demandes de R√©paration
- `GET /api/repair-requests/` - Pagination et filtres optimis√©s
- `POST /api/repair-requests/` - Validation et notifications
- `GET /api/repair-requests/dashboard_stats/` - Statistiques optimis√©es

### Techniciens
- `GET /api/technicians/` - Index sur disponibilit√© et sp√©cialit√©
- `GET /api/technicians/me/` - Profil avec statistiques
- `GET /api/repair-requests/available_technicians/` - G√©olocalisation optimis√©e

### Avis et Paiements
- `GET /api/reviews/received/` - Pagination et tri optimis√©s
- `GET /api/payments/my_payments/` - Filtrage par utilisateur

## Monitoring

Le syst√®me inclut un middleware de monitoring qui :
- Mesure le temps de r√©ponse de chaque requ√™te
- Log les requ√™tes lentes (> 1 seconde)
- Ajoute un header `X-Response-Time` aux r√©ponses

## Tests de Performance

Ex√©cutez `python test_optimizations.py` pour v√©rifier :
- Temps de r√©ponse des endpoints
- Utilisation des index de base de donn√©es
- Gestion des erreurs
- S√©curit√© des endpoints

## Maintenance

### V√©rifications R√©guli√®res
1. **Logs de performance** - Surveiller les requ√™tes lentes
2. **Utilisation des index** - V√©rifier l'efficacit√© des requ√™tes
3. **S√©curit√©** - Tester les endpoints sensibles
4. **Cache** - Optimiser les strat√©gies de mise en cache

### Optimisations Futures
1. **Redis** pour le cache distribu√©
2. **CDN** pour les fichiers statiques
3. **Base de donn√©es** PostgreSQL pour la production
4. **Load balancing** pour la haute disponibilit√©
"""
        
        with open("OPTIMIZATIONS_DOCUMENTATION.md", 'w') as f:
            f.write(doc_content)
        
        print_success("Documentation cr√©√©e")

    def apply_all_optimizations(self):
        """Applique toutes les optimisations."""
        print_header("APPLICATION DES OPTIMISATIONS COMPL√àTES")
        
        # V√©rifier l'environnement
        if not self.check_environment():
            print_error("Environnement non compatible")
            return False
        
        # Appliquer les optimisations
        self.apply_backend_optimizations()
        self.apply_frontend_optimizations()
        self.apply_security_fixes()
        self.create_database_indexes()
        self.optimize_settings()
        self.create_performance_monitoring()
        
        # Cr√©er la documentation
        self.create_documentation()
        
        # Ex√©cuter les tests
        self.run_tests()
        
        print_header("OPTIMISATIONS TERMIN√âES")
        print_success("Toutes les optimisations ont √©t√© appliqu√©es avec succ√®s")
        print_info("Consultez OPTIMIZATIONS_DOCUMENTATION.md pour plus d'informations")
        
        return True

def main():
    """Fonction principale."""
    print_header("OPTIMISATION DEPANNETELIMAN")
    print_info("Application des optimisations de performance et de s√©curit√©")
    
    applier = OptimizationApplier()
    success = applier.apply_all_optimizations()
    
    if success:
        print_header("SUCC√àS")
        print_success("L'application est maintenant optimis√©e et s√©curis√©e")
        print_info("Vous pouvez d√©marrer les serveurs avec :")
        print_info("Backend: cd Backend && python manage.py runserver")
        print_info("Frontend: cd Frontend && npm run dev")
    else:
        print_header("√âCHEC")
        print_error("Des erreurs sont survenues lors de l'optimisation")
        print_info("V√©rifiez les logs ci-dessus et corrigez les probl√®mes")

if __name__ == "__main__":
    main()