#!/usr/bin/env python3
"""
Script de test pour les migrations de la base de donn√©es
Adapte la base de donn√©es pour les nouvelles fonctionnalit√©s de communication
"""

import os
import sys
import django
from django.core.management import execute_from_command_line
from django.db import connection
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'depannage.settings')
django.setup()

from depannage.models import (
    ChatConversation, ChatMessage, ChatMessageAttachment,
    CommunicationStats, CommunicationSession, CommunicationNotification,
    CommunicationSettings, User, Client, Technician, RepairRequest
)


def test_migrations():
    """Test des migrations et des nouveaux mod√®les."""
    print("üîß Test des migrations de la base de donn√©es...")
    
    try:
        # Test 1: V√©rifier que les nouveaux mod√®les existent
        print("\n1. V√©rification des nouveaux mod√®les...")
        
        # Test ChatConversation
        conversation_count = ChatConversation.objects.count()
        print(f"   ‚úÖ ChatConversation: {conversation_count} conversations")
        
        # Test ChatMessage
        message_count = ChatMessage.objects.count()
        print(f"   ‚úÖ ChatMessage: {message_count} messages")
        
        # Test ChatMessageAttachment
        attachment_count = ChatMessageAttachment.objects.count()
        print(f"   ‚úÖ ChatMessageAttachment: {attachment_count} pi√®ces jointes")
        
        # Test CommunicationStats
        stats_count = CommunicationStats.objects.count()
        print(f"   ‚úÖ CommunicationStats: {stats_count} statistiques")
        
        # Test CommunicationSession
        session_count = CommunicationSession.objects.count()
        print(f"   ‚úÖ CommunicationSession: {session_count} sessions")
        
        # Test CommunicationNotification
        notification_count = CommunicationNotification.objects.count()
        print(f"   ‚úÖ CommunicationNotification: {notification_count} notifications")
        
        # Test CommunicationSettings
        settings_count = CommunicationSettings.objects.count()
        print(f"   ‚úÖ CommunicationSettings: {settings_count} param√®tres")
        
        print("\n2. Test de cr√©ation d'objets...")
        
        # Cr√©er des utilisateurs de test si n√©cessaire
        client_user, created = User.objects.get_or_create(
            username='test_client_comm',
            defaults={
                'email': 'test_client_comm@example.com',
                'first_name': 'Test',
                'last_name': 'Client Comm',
                'is_active': True
            }
        )
        
        technician_user, created = User.objects.get_or_create(
            username='test_technician_comm',
            defaults={
                'email': 'test_technician_comm@example.com',
                'first_name': 'Test',
                'last_name': 'Technician Comm',
                'is_active': True
            }
        )
        
        # Cr√©er des profils si n√©cessaire
        client, created = Client.objects.get_or_create(
            user=client_user,
            defaults={
                'address': '123 Test Street',
                'phone': '+2250700000001',
                'is_active': True
            }
        )
        
        technician, created = Technician.objects.get_or_create(
            user=technician_user,
            defaults={
                'specialty': 'electrician',
                'phone': '+2250700000002',
                'is_available': True,
                'is_verified': True,
                'hourly_rate': 5000.00
            }
        )
        
        # Cr√©er une demande de r√©paration de test
        request, created = RepairRequest.objects.get_or_create(
            client=client,
            title='Test Communication Request',
            defaults={
                'specialty_needed': 'electrician',
                'address': '123 Test Street',
                'status': 'assigned',
                'technician': technician
            }
        )
        
        # Test 3: Cr√©er une conversation de chat
        conversation, created = ChatConversation.objects.get_or_create(
            client=client_user,
            technician=technician_user,
            defaults={
                'request': request,
                'is_active': True,
                'last_activity_type': 'message'
            }
        )
        print(f"   ‚úÖ Conversation cr√©√©e: {conversation}")
        
        # Test 4: Cr√©er des messages de test
        message1 = ChatMessage.objects.create(
            conversation=conversation,
            sender=client_user,
            content='Bonjour, j\'ai un probl√®me √©lectrique.',
            message_type='text'
        )
        print(f"   ‚úÖ Message texte cr√©√©: {message1.id}")
        
        message2 = ChatMessage.objects.create(
            conversation=conversation,
            sender=technician_user,
            content='Je serai l√† dans 30 minutes.',
            message_type='text'
        )
        print(f"   ‚úÖ Message r√©ponse cr√©√©: {message2.id}")
        
        # Test 5: Cr√©er un message de localisation
        location_message = ChatMessage.objects.create(
            conversation=conversation,
            sender=technician_user,
            content='Ma position actuelle',
            message_type='location',
            latitude=5.3600,
            longitude=-4.0083
        )
        print(f"   ‚úÖ Message localisation cr√©√©: {location_message.id}")
        
        # Test 6: Cr√©er un message vocal
        voice_message = ChatMessage.objects.create(
            conversation=conversation,
            sender=client_user,
            content='Message vocal',
            message_type='voice',
            voice_duration=15
        )
        print(f"   ‚úÖ Message vocal cr√©√©: {voice_message.id}")
        
        # Test 7: Cr√©er des statistiques de communication
        stats, created = CommunicationStats.objects.get_or_create(
            conversation=conversation,
            defaults={
                'total_messages': 4,
                'text_messages': 2,
                'voice_messages': 1,
                'location_shares': 1,
                'file_shares': 0,
                'avg_response_time_minutes': 5.5
            }
        )
        print(f"   ‚úÖ Statistiques cr√©√©es: {stats}")
        
        # Test 8: Cr√©er une session de communication
        session = CommunicationSession.objects.create(
            conversation=conversation,
            user=client_user,
            messages_sent=2,
            messages_received=2,
            device_info={'browser': 'Chrome', 'os': 'Windows'},
            ip_address='127.0.0.1'
        )
        print(f"   ‚úÖ Session cr√©√©e: {session}")
        
        # Test 9: Cr√©er une notification
        notification = CommunicationNotification.objects.create(
            recipient=technician_user,
            conversation=conversation,
            notification_type='new_message',
            title='Nouveau message',
            message='Vous avez re√ßu un nouveau message de Test Client Comm'
        )
        print(f"   ‚úÖ Notification cr√©√©e: {notification}")
        
        # Test 10: Cr√©er des param√®tres de communication
        settings, created = CommunicationSettings.objects.get_or_create(
            user=client_user,
            defaults={
                'auto_read_receipts': True,
                'typing_indicators': True,
                'sound_notifications': True,
                'vibration_notifications': True,
                'message_preview': True,
                'auto_download_media': False,
                'max_file_size_mb': 10,
                'allowed_file_types': ['image/*', 'audio/*', 'video/*'],
                'language': 'fr',
                'theme': 'light'
            }
        )
        print(f"   ‚úÖ Param√®tres cr√©√©s: {settings}")
        
        print("\n3. Test des fonctionnalit√©s avanc√©es...")
        
        # Test des m√©thodes personnalis√©es
        unread_count = conversation.unread_count_for_user(client_user)
        print(f"   ‚úÖ Messages non lus pour client: {unread_count}")
        
        conversation.mark_all_as_read_for_user(client_user)
        print(f"   ‚úÖ Tous les messages marqu√©s comme lus")
        
        # Test du mode silencieux
        conversation.mute_until(timezone.now() + timedelta(hours=2))
        is_muted = conversation.is_muted_for_user(client_user)
        print(f"   ‚úÖ Conversation en mode silencieux: {is_muted}")
        
        conversation.unmute()
        is_muted = conversation.is_muted_for_user(client_user)
        print(f"   ‚úÖ Conversation d√©sactiv√©e du mode silencieux: {is_muted}")
        
        # Test de l'√©pinglage
        conversation.toggle_pin()
        print(f"   ‚úÖ Conversation √©pingl√©e: {conversation.is_pinned}")
        
        # Test de l'√©dition de message
        message1.edit_message('Message modifi√©')
        print(f"   ‚úÖ Message modifi√©: {message1.is_edited}")
        
        # Test des param√®tres
        in_quiet_hours = settings.is_in_quiet_hours()
        print(f"   ‚úÖ En heures silencieuses: {in_quiet_hours}")
        
        allowed_types = settings.get_allowed_file_types()
        print(f"   ‚úÖ Types de fichiers autoris√©s: {allowed_types}")
        
        print("\n4. Test des contraintes de base de donn√©es...")
        
        # Test des contraintes de validation
        try:
            # Test contrainte dur√©e vocale positive
            invalid_voice = ChatMessage.objects.create(
                conversation=conversation,
                sender=client_user,
                content='Test',
                message_type='voice',
                voice_duration=0  # Devrait √©chouer
            )
            print("   ‚ùå Contrainte dur√©e vocale non respect√©e")
        except Exception as e:
            print(f"   ‚úÖ Contrainte dur√©e vocale respect√©e: {e}")
        
        try:
            # Test contrainte coordonn√©es pour messages de localisation
            invalid_location = ChatMessage.objects.create(
                conversation=conversation,
                sender=client_user,
                content='Test',
                message_type='text',  # Pas un message de localisation
                latitude=5.3600,  # Devrait √©chouer
                longitude=-4.0083
            )
            print("   ‚ùå Contrainte coordonn√©es non respect√©e")
        except Exception as e:
            print(f"   ‚úÖ Contrainte coordonn√©es respect√©e: {e}")
        
        print("\n5. Test des index de performance...")
        
        # Test des requ√™tes avec index
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT COUNT(*) FROM depannage_chatmessage 
                WHERE conversation_id = %s AND created_at > %s
            """, [conversation.id, timezone.now() - timedelta(days=1)])
            count = cursor.fetchone()[0]
            print(f"   ‚úÖ Requ√™te avec index conversation/created_at: {count} messages")
        
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT COUNT(*) FROM depannage_chatconversation 
                WHERE client_id = %s AND last_message_at IS NOT NULL
            """, [client_user.id])
            count = cursor.fetchone()[0]
            print(f"   ‚úÖ Requ√™te avec index client/last_message_at: {count} conversations")
        
        print("\n6. Nettoyage des donn√©es de test...")
        
        # Supprimer les objets de test
        ChatMessage.objects.filter(conversation=conversation).delete()
        CommunicationSession.objects.filter(conversation=conversation).delete()
        CommunicationNotification.objects.filter(conversation=conversation).delete()
        CommunicationStats.objects.filter(conversation=conversation).delete()
        CommunicationSettings.objects.filter(user=client_user).delete()
        ChatConversation.objects.filter(id=conversation.id).delete()
        RepairRequest.objects.filter(id=request.id).delete()
        
        print("   ‚úÖ Donn√©es de test supprim√©es")
        
        print("\nüéâ Tous les tests de migration ont r√©ussi!")
        assert True, "Tous les tests de migration ont r√©ussi."
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
        assert False, f"√âchec des tests de migration: {e}"


def apply_migrations():
    """Applique les migrations."""
    print("üîÑ Application des migrations...")
    
    try:
        # Appliquer les migrations
        execute_from_command_line(['manage.py', 'makemigrations'])
        execute_from_command_line(['manage.py', 'migrate'])
        
        print("‚úÖ Migrations appliqu√©es avec succ√®s")
        assert True, "Migrations appliqu√©es avec succ√®s."
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'application des migrations: {e}")
        assert False, f"√âchec de l'application des migrations: {e}"


def main():
    """Fonction principale."""
    print("üöÄ Test des migrations de la base de donn√©es pour les fonctionnalit√©s de communication")
    print("=" * 80)
    
    # Appliquer les migrations
    if not apply_migrations():
        print("‚ùå √âchec de l'application des migrations")
        sys.exit(1)
    
    # Tester les migrations
    if not test_migrations():
        print("‚ùå √âchec des tests de migration")
        sys.exit(1)
    
    print("\n‚úÖ Tous les tests ont r√©ussi!")
    print("La base de donn√©es est pr√™te pour les nouvelles fonctionnalit√©s de communication.")


if __name__ == '__main__':
    main() 