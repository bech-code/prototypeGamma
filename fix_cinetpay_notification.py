#!/usr/bin/env python3
"""
Script pour corriger la logique de notification CinetPay et am√©liorer 
l'activation automatique des abonnements techniciens.
"""

import os
import sys
import django
import requests
import json
from datetime import timedelta

# Configuration Django
sys.path.append('/Users/mohamedbechirdiarra/Downloads/Prototype5b/Backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'auth.settings')
django.setup()

from users.models import User
from depannage.models import Technician, CinetPayPayment, TechnicianSubscription, Notification
from django.utils import timezone

def fix_cinetpay_notification_logic():
    """Corriger la logique de notification CinetPay"""
    
    print("üîß CORRECTION - Logique de notification CinetPay")
    print("=" * 60)
    
    # 1. Identifier les paiements r√©ussis sans abonnement
    print("\n1Ô∏è‚É£ Identification des paiements sans abonnement...")
    
    successful_payments = CinetPayPayment.objects.filter(
        status='success',
        metadata__icontains='subscription'
    )
    
    print(f"   Paiements r√©ussis avec m√©tadonn√©es 'subscription': {successful_payments.count()}")
    
    fixed_count = 0
    
    for payment in successful_payments:
        # V√©rifier si un abonnement existe d√©j√† pour ce paiement
        existing_sub = TechnicianSubscription.objects.filter(payment=payment).first()
        
        if existing_sub:
            print(f"   ‚úÖ Abonnement d√©j√† existant pour {payment.transaction_id}")
            continue
        
        # V√©rifier si l'utilisateur existe
        if not payment.user:
            print(f"   ‚ùå Paiement {payment.transaction_id} sans utilisateur")
            continue
        
        # R√©cup√©rer le profil technicien
        technician = None
        try:
            technician = payment.user.technician_depannage
        except:
            try:
                technician = payment.user.technician_profile
            except:
                pass
        
        if not technician:
            print(f"   ‚ùå Utilisateur {payment.user.username} sans profil technicien")
            continue
        
        # Extraire la dur√©e depuis les m√©tadonn√©es
        duration_months = 1  # Par d√©faut
        if "_subscription_" in payment.metadata:
            try:
                duration_part = payment.metadata.split("_subscription_")[1]
                duration_months = int(duration_part.split("months")[0])
            except:
                duration_months = 1
        
        # Cr√©er l'abonnement
        now = timezone.now()
        
        # V√©rifier s'il y a d√©j√† un abonnement actif √† prolonger
        active_sub = technician.subscriptions.filter(end_date__gt=now).order_by('-end_date').first()
        
        if active_sub:
            # Prolonger l'abonnement existant
            active_sub.end_date += timedelta(days=30 * duration_months)
            active_sub.payment = payment
            active_sub.save()
            sub = active_sub
            print(f"   ‚úÖ Abonnement prolong√© pour {technician.user.username}")
        else:
            # Cr√©er un nouvel abonnement
            sub = TechnicianSubscription.objects.create(
                technician=technician,
                plan_name=f"Standard {duration_months} mois",
                start_date=now,
                end_date=now + timedelta(days=30 * duration_months),
                payment=payment,
                is_active=True
            )
            print(f"   ‚úÖ Nouvel abonnement cr√©√© pour {technician.user.username}")
        
        print(f"      - Plan: {sub.plan_name}")
        print(f"      - Dur√©e: {duration_months} mois")
        print(f"      - Expire le: {sub.end_date}")
        
        # Cr√©er une notification pour l'utilisateur
        try:
            Notification.objects.create(
                recipient=payment.user,
                title="Abonnement activ√© avec succ√®s !",
                message=f"Votre abonnement a √©t√© activ√© pour {duration_months} mois jusqu'au {sub.end_date.strftime('%d/%m/%Y')}. Vous pouvez maintenant recevoir de nouvelles demandes de r√©paration.",
                type="subscription_renewed",
            )
            print(f"      - Notification cr√©√©e")
        except Exception as e:
            print(f"      - Erreur cr√©ation notification: {e}")
        
        fixed_count += 1
    
    print(f"\n   Total abonnements corrig√©s: {fixed_count}")
    
    return fixed_count

def test_notification_endpoint():
    """Tester l'endpoint de notification CinetPay"""
    
    print("\nüß™ TEST - Endpoint de notification CinetPay")
    print("=" * 50)
    
    # Cr√©er un paiement de test
    test_user = User.objects.filter(user_type='technician').first()
    if not test_user:
        print("   ‚ùå Aucun technicien trouv√© pour le test")
        return
    
    # Cr√©er un paiement de test
    payment = CinetPayPayment.objects.create(
        transaction_id=f"TEST_{timezone.now().strftime('%Y%m%d_%H%M%S')}",
        amount=5000,
        currency="XOF",
        description="Test d'abonnement technicien",
        customer_name=test_user.last_name or test_user.username,
        customer_surname=test_user.first_name or "",
        customer_email=test_user.email,
        customer_phone_number="+22300000000",
        customer_address="Test Address",
        customer_city="Bamako",
        customer_country="ML",
        customer_state="ML",
        customer_zip_code="00000",
        status="pending",
        metadata=f"user_{test_user.id}_subscription_1months",
        user=test_user
    )
    
    print(f"   ‚úÖ Paiement de test cr√©√©: {payment.transaction_id}")
    
    # Simuler la notification CinetPay
    notification_data = {
        "transaction_id": payment.transaction_id,
        "status": "ACCEPTED",
        "payment_token": f"test_token_{payment.transaction_id}",
        "amount": payment.amount,
        "currency": payment.currency,
        "customer_name": payment.customer_name,
        "customer_surname": payment.customer_surname,
        "customer_email": payment.customer_email,
        "customer_phone_number": payment.customer_phone_number,
        "customer_address": payment.customer_address,
        "customer_city": payment.customer_city,
        "customer_country": payment.customer_country,
        "customer_state": payment.customer_state,
        "customer_zip_code": payment.customer_zip_code,
        "metadata": payment.metadata
    }
    
    try:
        response = requests.post(
            "http://127.0.0.1:8000/depannage/api/cinetpay/cinetpay/notify/",
            json=notification_data,
            headers={'Content-Type': 'application/json'}
        )
        
        print(f"   Status de la notification: {response.status_code}")
        if response.status_code == 200:
            print("   ‚úÖ Notification trait√©e avec succ√®s")
            
            # V√©rifier que l'abonnement a √©t√© cr√©√©
            payment.refresh_from_db()
            if payment.status == 'success':
                print("   ‚úÖ Paiement marqu√© comme r√©ussi")
                
                # V√©rifier l'abonnement
                sub = TechnicianSubscription.objects.filter(payment=payment).first()
                if sub:
                    print(f"   ‚úÖ Abonnement cr√©√©: {sub.plan_name} jusqu'au {sub.end_date}")
                else:
                    print("   ‚ùå Aucun abonnement cr√©√©")
            else:
                print(f"   ‚ùå Paiement non marqu√© comme r√©ussi: {payment.status}")
        else:
            print(f"   ‚ùå Erreur notification: {response.text}")
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test: {e}")

def improve_notification_logic():
    """Am√©liorer la logique de notification dans views.py"""
    
    print("\nüîß AM√âLIORATION - Logique de notification dans views.py")
    print("=" * 60)
    
    # Code am√©lior√© pour la fonction notify
    improved_code = '''
    @action(detail=False, methods=["post"], permission_classes=[AllowAny], url_path="cinetpay/notify")
    @permission_classes([AllowAny])
    def notify(self, request):
        """Endpoint pour recevoir les notifications de paiement de CinetPay (abonnement technicien)."""
        logger.info(f"Notification CinetPay re√ßue: {request.data}")
        
        try:
            serializer = CinetPayNotificationSerializer(data=request.data)
            if not serializer.is_valid():
                logger.error(f"Donn√©es de notification invalides: {serializer.errors}")
                return Response(serializer.errors, status=400)
            
            data = serializer.validated_data
            
            # R√©cup√©rer le paiement
            try:
                payment = CinetPayPayment.objects.get(transaction_id=data["transaction_id"])
            except CinetPayPayment.DoesNotExist:
                logger.error(f"Paiement non trouv√©: {data['transaction_id']}")
                return Response({"error": "Paiement non trouv√©"}, status=404)
            
            # Traiter le statut du paiement
            if data["status"] == "ACCEPTED":
                payment.status = "success"
                payment.paid_at = timezone.now()
                payment.cinetpay_transaction_id = data.get("payment_token", "")
                
                # Activation abonnement technicien
                if payment.metadata and "subscription" in payment.metadata:
                    from .models import TechnicianSubscription
                    
                    user = payment.user
                    if not user:
                        logger.error(f"Paiement {payment.transaction_id} sans utilisateur")
                        return Response({"error": "Utilisateur non trouv√©"}, status=400)
                    
                    # R√©cup√©rer le profil technicien
                    technician = None
                    try:
                        technician = user.technician_depannage
                    except:
                        try:
                            technician = user.technician_profile
                        except:
                            pass
                    
                    if not technician:
                        logger.error(f"Utilisateur {user.username} sans profil technicien")
                        return Response({"error": "Profil technicien non trouv√©"}, status=400)
                    
                    # Extraire la dur√©e depuis le metadata
                    duration_months = 1
                    if "_subscription_" in payment.metadata:
                        try:
                            duration_part = payment.metadata.split("_subscription_")[1]
                            duration_months = int(duration_part.split("months")[0])
                        except Exception as e:
                            logger.warning(f"Erreur extraction dur√©e: {e}, utilisation valeur par d√©faut")
                            duration_months = 1
                    
                    now = timezone.now()
                    
                    # V√©rifier s'il y a d√©j√† un abonnement actif √† prolonger
                    active_sub = technician.subscriptions.filter(end_date__gt=now).order_by('-end_date').first()
                    
                    if active_sub:
                        # Prolonger l'abonnement existant
                        active_sub.end_date += timedelta(days=30 * duration_months)
                        active_sub.payment = payment
                        active_sub.save()
                        sub = active_sub
                        logger.info(f"Abonnement prolong√© pour {technician.user.username}")
                    else:
                        # Cr√©er un nouvel abonnement
                        sub = TechnicianSubscription.objects.create(
                            technician=technician,
                            plan_name=f"Standard {duration_months} mois",
                            start_date=now,
                            end_date=now + timedelta(days=30 * duration_months),
                            payment=payment,
                            is_active=True
                        )
                        logger.info(f"Nouvel abonnement cr√©√© pour {technician.user.username}")
                    
                    # Cr√©er une notification pour l'utilisateur
                    try:
                        Notification.objects.create(
                            recipient=user,
                            title="Abonnement activ√© avec succ√®s !",
                            message=f"Votre abonnement a √©t√© activ√© pour {duration_months} mois jusqu'au {sub.end_date.strftime('%d/%m/%Y')}. Vous pouvez maintenant recevoir de nouvelles demandes de r√©paration.",
                            type="subscription_renewed",
                        )
                    except Exception as e:
                        logger.error(f"Erreur cr√©ation notification: {e}")
                
                payment.save()
                logger.info(f"Paiement {payment.transaction_id} trait√© avec succ√®s")
                return Response({"success": True})
                
            elif data["status"] == "CANCELLED":
                payment.status = "failed"
                payment.save()
                
                try:
                    Notification.objects.create(
                        recipient=payment.user,
                        title="Paiement √©chou√©",
                        message="Votre paiement a √©chou√©. Veuillez r√©essayer.",
                        type="payment_failed",
                    )
                except Exception as e:
                    logger.error(f"Erreur cr√©ation notification d'√©chec: {e}")
                
                return Response({"success": False, "error": "Paiement annul√©"}, status=400)
            else:
                logger.warning(f"Statut de paiement inattendu: {data['status']}")
                return Response({"error": "Statut de paiement inconnu"}, status=400)
                
        except Exception as e:
            logger.error(f"Erreur lors du traitement de la notification: {e}")
            return Response({"error": "Erreur interne du serveur"}, status=500)
    '''
    
    print("   Code am√©lior√© g√©n√©r√© pour la fonction notify")
    print("   Principales am√©liorations:")
    print("   - Gestion d'erreurs plus robuste")
    print("   - Logging d√©taill√©")
    print("   - V√©rification de l'existence de l'utilisateur")
    print("   - Gestion des deux types de profils techniciens")
    print("   - Prolongation ou cr√©ation d'abonnement")
    print("   - Notifications utilisateur")
    
    # Sauvegarder le code dans un fichier
    with open('improved_notify_code.py', 'w') as f:
        f.write(improved_code)
    
    print("   ‚úÖ Code am√©lior√© sauvegard√© dans 'improved_notify_code.py'")

if __name__ == "__main__":
    # 1. Corriger les paiements existants
    fixed_count = fix_cinetpay_notification_logic()
    
    # 2. Tester l'endpoint de notification
    test_notification_endpoint()
    
    # 3. Am√©liorer la logique
    improve_notification_logic()
    
    print("\n" + "=" * 60)
    print("‚úÖ Correction et am√©lioration termin√©es")
    print(f"\nüìã R√©sum√©:")
    print(f"   - {fixed_count} abonnements corrig√©s")
    print("   - Test de notification effectu√©")
    print("   - Code am√©lior√© g√©n√©r√©")
    print("\nüìù Instructions:")
    print("1. Remplacer la fonction notify dans views.py par le code am√©lior√©")
    print("2. Red√©marrer le serveur Django")
    print("3. Tester avec un nouveau paiement") 