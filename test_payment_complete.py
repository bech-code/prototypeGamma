#!/usr/bin/env python3
"""
Script complet pour tester le syst√®me de paiement CinetPay en mode simulateur.
"""

import os
import sys
import subprocess
import requests
import json
from datetime import datetime

# Configuration
BASE_URL = "http://127.0.0.1:8000"
LOGIN_URL = f"{BASE_URL}/users/login/"
SUBSCRIPTION_PAYMENT_URL = f"{BASE_URL}/depannage/api/cinetpay/initiate_subscription_payment/"
NOTIFY_URL = f"{BASE_URL}/depannage/api/cinetpay/notify/"
SUBSCRIPTION_STATUS_URL = f"{BASE_URL}/depannage/api/technicians/subscription_status/"

TECHNICIAN_EMAIL = "ballo@gmail.com"
TECHNICIAN_PASSWORD = "bechir66312345"


def start_backend():
    """D√©marre le backend Django."""
    print("üöÄ D√©marrage du backend Django...")
    
    try:
        # V√©rifier si le serveur est d√©j√† en cours d'ex√©cution
        response = requests.get(f"{BASE_URL}/depannage/api/health_check/", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Backend d√©j√† en cours d'ex√©cution")
            return True
    except:
        pass
    
    # D√©marrer le backend
    try:
        process = subprocess.Popen(
            ["./start_backend.sh"],
            cwd="/Users/mohamedbechirdiarra/Downloads/Prototype5b",
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # Attendre un peu que le serveur d√©marre
        import time
        time.sleep(3)
        
        # V√©rifier si le serveur est d√©marr√©
        try:
            response = requests.get(f"{BASE_URL}/depannage/api/health_check/", timeout=5)
            if response.status_code == 200:
                print("‚úÖ Backend d√©marr√© avec succ√®s")
                return True
        except:
            pass
        
        print("‚ö†Ô∏è Backend non accessible, mais continuons le test...")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage du backend: {e}")
        return False


def test_payment_simulation():
    """Test complet du syst√®me de paiement en mode simulateur."""
    print("\nüß™ TEST DU SYST√àME DE PAIEMENT CINETPAY (MODE SIMULATEUR)")
    print("=" * 70)
    
    # 1. Connexion technicien
    print("\n1Ô∏è‚É£ Connexion du technicien...")
    login_data = {"email": TECHNICIAN_EMAIL, "password": TECHNICIAN_PASSWORD}
    
    try:
        login_response = requests.post(LOGIN_URL, json=login_data, timeout=10)
        
        if login_response.status_code != 200:
            print(f"‚ùå √âchec de connexion: {login_response.status_code}")
            print(login_response.text)
            return False
        
        token = login_response.json().get("access")
        headers = {"Authorization": f"Bearer {token}"}
        print("‚úÖ Connexion r√©ussie")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

    # 2. V√©rifier le statut d'abonnement actuel
    print("\n2Ô∏è‚É£ V√©rification du statut d'abonnement actuel...")
    try:
        status_response = requests.get(SUBSCRIPTION_STATUS_URL, headers=headers, timeout=10)
        
        if status_response.status_code == 200:
            status_data = status_response.json()
            print(f"üìä Statut actuel: {status_data}")
        else:
            print(f"‚ö†Ô∏è Erreur lors de la v√©rification du statut: {status_response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de la v√©rification: {e}")

    # 3. Initier un paiement d'abonnement
    print("\n3Ô∏è‚É£ Initiation d'un paiement d'abonnement...")
    payment_data = {
        "duration_months": 1,
        "amount": 5000,
        "description": "Test d'abonnement technicien"
    }
    
    try:
        payment_response = requests.post(SUBSCRIPTION_PAYMENT_URL, json=payment_data, headers=headers, timeout=10)
        
        if payment_response.status_code != 200:
            print(f"‚ùå √âchec d'initiation du paiement: {payment_response.status_code}")
            print(payment_response.text)
            return False
        
        payment_info = payment_response.json()
        transaction_id = payment_info.get("transaction_id")
        payment_url = payment_info.get("payment_url")
        
        print(f"‚úÖ Paiement initi√© avec succ√®s")
        print(f"   Transaction ID: {transaction_id}")
        print(f"   URL de paiement: {payment_url}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initiation: {e}")
        return False

    # 4. Simuler la notification CinetPay (webhook)
    print("\n4Ô∏è‚É£ Simulation de la notification CinetPay...")
    notify_data = {
        "transaction_id": transaction_id,
        "status": "ACCEPTED",
        "payment_token": f"test_token_{transaction_id}",
        "amount": 5000,
        "currency": "XOF",
        "payment_date": datetime.now().isoformat(),
        "customer_name": "Test Technicien",
        "customer_surname": "",
        "customer_email": TECHNICIAN_EMAIL,
        "customer_phone_number": "+22300000000",
        "customer_address": "Test Address",
        "customer_city": "Bamako",
        "customer_country": "ML",
        "customer_state": "ML",
        "customer_zip_code": "00000",
        "metadata": json.dumps({
            "user_id": 1,  # ID factice pour le test
            "duration_months": 1,
            "subscription_type": "technician_premium"
        })
    }
    
    try:
        notify_response = requests.post(NOTIFY_URL, json=notify_data, timeout=10)
        
        if notify_response.status_code == 200:
            print("‚úÖ Notification simul√©e avec succ√®s")
            print(f"   R√©ponse: {notify_response.json()}")
        else:
            print(f"‚ùå Erreur lors de la simulation: {notify_response.status_code}")
            print(notify_response.text)
    except Exception as e:
        print(f"‚ùå Erreur lors de la simulation: {e}")

    # 5. V√©rifier le nouveau statut d'abonnement
    print("\n5Ô∏è‚É£ V√©rification du nouveau statut d'abonnement...")
    try:
        status_response = requests.get(SUBSCRIPTION_STATUS_URL, headers=headers, timeout=10)
        
        if status_response.status_code == 200:
            status_data = status_response.json()
            print(f"üìä Nouveau statut: {status_data}")
            
            if status_data.get("can_receive_requests"):
                print("‚úÖ Abonnement activ√© avec succ√®s !")
                return True
            else:
                print("‚ùå Abonnement non activ√©")
                return False
        else:
            print(f"‚ö†Ô∏è Erreur lors de la v√©rification finale: {status_response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification finale: {e}")
        return False


def test_double_payment_prevention():
    """Test de la pr√©vention des doubles paiements."""
    print("\nüß™ TEST DE PR√âVENTION DES DOUBLES PAIEMENTS")
    print("=" * 50)
    
    # Connexion
    try:
        login_data = {"email": TECHNICIAN_EMAIL, "password": TECHNICIAN_PASSWORD}
        login_response = requests.post(LOGIN_URL, json=login_data, timeout=10)
        
        if login_response.status_code != 200:
            print("‚ùå √âchec de connexion")
            return False
        
        token = login_response.json().get("access")
        headers = {"Authorization": f"Bearer {token}"}
        
        # Tentative de double paiement
        payment_data = {"duration_months": 1}
        payment_response = requests.post(SUBSCRIPTION_PAYMENT_URL, json=payment_data, headers=headers, timeout=10)
        
        if payment_response.status_code == 400:
            error_data = payment_response.json()
            print("‚úÖ Pr√©vention des doubles paiements active")
            print(f"   Message: {error_data.get('error', 'Erreur inconnue')}")
            return True
        else:
            print("‚ùå La pr√©vention des doubles paiements ne fonctionne pas")
            print(f"   Status: {payment_response.status_code}")
            print(f"   R√©ponse: {payment_response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de pr√©vention: {e}")
        return False


def main():
    """Fonction principale de test."""
    print("üöÄ D√©marrage des tests de paiement CinetPay")
    print("=" * 50)
    
    # D√©marrer le backend si n√©cessaire
    backend_ok = start_backend()
    
    if not backend_ok:
        print("‚ö†Ô∏è Backend non accessible, mais continuons les tests...")
    
    # Test principal
    payment_ok = test_payment_simulation()
    
    # Test de pr√©vention des doubles paiements
    prevention_ok = test_double_payment_prevention()
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 50)
    print(f"Backend: {'‚úÖ' if backend_ok else '‚ùå'}")
    print(f"Paiement: {'‚úÖ' if payment_ok else '‚ùå'}")
    print(f"Pr√©vention doubles: {'‚úÖ' if prevention_ok else '‚ùå'}")
    
    if payment_ok and prevention_ok:
        print("\nüéâ Tous les tests sont pass√©s avec succ√®s !")
        print("Le syst√®me de paiement CinetPay fonctionne correctement en mode simulateur.")
    else:
        print("\n‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez la configuration.")
    
    print("\n‚úÖ Tests termin√©s !")


if __name__ == "__main__":
    main() 