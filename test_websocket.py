#!/usr/bin/env python3
import asyncio
import websockets
import json
import sys

async def test_websocket(token=None):
    if not token:
        print("üîë Veuillez entrer votre token JWT d'acc√®s :")
        print("   (Vous pouvez le trouver dans le stockage local de votre navigateur)")
        token = input("Token: ").strip()
        
        if not token:
            print("‚ùå Aucun token fourni. Arr√™t du test.")
            return
    
    uri = f"ws://127.0.0.1:8000/ws/notifications/?token={token}"
    
    print(f"üîó Tentative de connexion WebSocket √† : {uri}")
    print("‚è≥ Connexion en cours...")
    
    try:
        async with websockets.connect(uri) as websocket:
            print("‚úÖ Connexion WebSocket √©tablie avec succ√®s!")
            print("üì° Le serveur ASGI fonctionne correctement pour les WebSockets")
            
            # Envoyer un message de test
            test_message = {"type": "test", "message": "Test WebSocket"}
            await websocket.send(json.dumps(test_message))
            print("‚úÖ Message de test envoy√© avec succ√®s")
            
            # Attendre une r√©ponse (timeout de 5 secondes)
            try:
                response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                print(f"‚úÖ R√©ponse re√ßue: {response}")
            except asyncio.TimeoutError:
                print("‚ö†Ô∏è  Aucune r√©ponse re√ßue dans les 5 secondes (normal pour un test)")
                
    except websockets.exceptions.InvalidStatusCode as e:
        if e.status_code == 403:
            print("‚ùå Erreur 403 (Forbidden): Token invalide ou expir√©")
            print("üí° V√©rifiez que votre token JWT est valide et non expir√©")
        elif e.status_code == 404:
            print("‚ùå Erreur 404: Le serveur ne supporte pas les WebSockets")
            print("üí° Assurez-vous d'utiliser un serveur ASGI (Daphne/Uvicorn)")
        else:
            print(f"‚ùå Erreur HTTP {e.status_code}: {e}")
    except websockets.exceptions.ConnectionClosed as e:
        print(f"‚ùå Connexion ferm√©e: {e}")
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        print("üí° V√©rifiez que le serveur backend est d√©marr√© avec un serveur ASGI")

def main():
    print("üß™ Test de connexion WebSocket pour les notifications")
    print("=" * 50)
    
    # V√©rifier si un token est fourni en argument
    token = None
    if len(sys.argv) > 1:
        token = sys.argv[1]
        print(f"üîë Token fourni en argument de ligne de commande")
    
    asyncio.run(test_websocket(token))
    
    print("\n" + "=" * 50)
    print("üìù Instructions pour trouver votre token JWT :")
    print("1. Connectez-vous sur votre application web")
    print("2. Ouvrez les outils de d√©veloppement (F12)")
    print("3. Allez dans l'onglet 'Application' > 'Stockage local'")
    print("4. Cherchez une cl√© nomm√©e 'access_token', 'token', ou similaire")
    print("5. Copiez la valeur et utilisez-la comme argument :")
    print("   python test_websocket.py VOTRE_TOKEN_ICI")

if __name__ == "__main__":
    main() 