#!/usr/bin/env python3
"""
Script de diagnostic pour identifier le probl√®me d'activation d'abonnement
apr√®s paiement CinetPay.
"""

import os
import sys
import django
import requests
import json
from datetime import datetime, timedelta

# Configuration Django
sys.path.append('/Users/mohamedbechirdiarra/Downloads/Prototype5b/Backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'auth.settings')
django.setup()

from users.models import User
from depannage.models import Technician, CinetPayPayment, TechnicianSubscription
from django.utils import timezone

def diagnostic_subscription_activation():
    """Diagnostic complet du probl√®me d'activation d'abonnement"""
    
    print("üîç DIAGNOSTIC - Probl√®me d'activation d'abonnement apr√®s paiement")
    print("=" * 80)
    
    # 1. V√©rifier les techniciens existants
    print("\n1Ô∏è‚É£ V√©rification des techniciens existants:")
    technicians = Technician.objects.all()
    print(f"   Total techniciens: {technicians.count()}")
    
    for tech in technicians[:5]:  # Afficher les 5 premiers
        user = tech.user
        print(f"   - {user.username} ({user.email}) - Sp√©cialit√©: {tech.specialty}")
        print(f"     V√©rifi√©: {tech.is_verified} | Disponible: {tech.is_available}")
        
        # V√©rifier les abonnements
        subscriptions = tech.subscriptions.all()
        print(f"     Abonnements: {subscriptions.count()}")
        for sub in subscriptions:
            print(f"       - {sub.plan_name} (du {sub.start_date} au {sub.end_date})")
            print(f"         Actif: {sub.is_active} | Expir√©: {sub.end_date < timezone.now()}")
    
    # 2. V√©rifier les paiements CinetPay
    print("\n2Ô∏è‚É£ V√©rification des paiements CinetPay:")
    payments = CinetPayPayment.objects.all()
    print(f"   Total paiements: {payments.count()}")
    
    for payment in payments[:5]:  # Afficher les 5 premiers
        print(f"   - Transaction: {payment.transaction_id}")
        print(f"     Montant: {payment.amount} {payment.currency}")
        print(f"     Statut: {payment.status}")
        print(f"     Utilisateur: {payment.user.username if payment.user else 'None'}")
        print(f"     M√©tadonn√©es: {payment.metadata}")
        print(f"     Pay√© le: {payment.paid_at}")
    
    # 3. V√©rifier les abonnements
    print("\n3Ô∏è‚É£ V√©rification des abonnements:")
    subscriptions = TechnicianSubscription.objects.all()
    print(f"   Total abonnements: {subscriptions.count()}")
    
    for sub in subscriptions[:5]:  # Afficher les 5 premiers
        print(f"   - Technicien: {sub.technician.user.username}")
        print(f"     Plan: {sub.plan_name}")
        print(f"     Du: {sub.start_date} au {sub.end_date}")
        print(f"     Actif: {sub.is_active}")
        print(f"     Expir√©: {sub.end_date < timezone.now()}")
        print(f"     Paiement li√©: {sub.payment.transaction_id if sub.payment else 'Aucun'}")
    
    # 4. Test de la fonction get_technician_profile
    print("\n4Ô∏è‚É£ Test de la fonction get_technician_profile:")
    
    def get_technician_profile(user):
        """Fonction copi√©e depuis views.py"""
        technician = getattr(user, 'technician_depannage', None)
        if technician:
            return technician
        technician = getattr(user, 'technician_profile', None)
        if technician:
            return technician
        return None
    
    # Tester avec quelques utilisateurs
    test_users = User.objects.filter(user_type='technician')[:3]
    for user in test_users:
        technician = get_technician_profile(user)
        print(f"   - {user.username}: {technician is not None}")
        if technician:
            print(f"     Type: {type(technician).__name__}")
            print(f"     Sp√©cialit√©: {technician.specialty}")
    
    # 5. Test de l'endpoint subscription_status
    print("\n5Ô∏è‚É£ Test de l'endpoint subscription_status:")
    
    # Connexion avec un technicien
    login_data = {
        "email": "technicien@depanneteliman.com",
        "password": "technicien123"
    }
    
    try:
        login_response = requests.post("http://127.0.0.1:8000/users/login/", json=login_data)
        if login_response.status_code == 200:
            token = login_response.json().get('access')
            headers = {'Authorization': f'Bearer {token}'}
            
            # Test de l'endpoint
            status_response = requests.get(
                "http://127.0.0.1:8000/depannage/api/technicians/subscription_status/",
                headers=headers
            )
            
            print(f"   Status de l'endpoint: {status_response.status_code}")
            if status_response.status_code == 200:
                data = status_response.json()
                print(f"   R√©ponse: {json.dumps(data, indent=2)}")
            else:
                print(f"   Erreur: {status_response.text}")
        else:
            print(f"   Erreur de connexion: {login_response.status_code}")
    except Exception as e:
        print(f"   Erreur lors du test: {e}")
    
    # 6. V√©rifier les probl√®mes potentiels
    print("\n6Ô∏è‚É£ V√©rification des probl√®mes potentiels:")
    
    # Probl√®me 1: Techniciens sans abonnement actif
    technicians_without_active_sub = []
    for tech in technicians:
        active_sub = tech.subscriptions.filter(end_date__gt=timezone.now()).first()
        if not active_sub:
            technicians_without_active_sub.append(tech)
    
    print(f"   Techniciens sans abonnement actif: {len(technicians_without_active_sub)}")
    for tech in technicians_without_active_sub[:3]:
        print(f"     - {tech.user.username}")
    
    # Probl√®me 2: Paiements sans abonnement cr√©√©
    payments_without_sub = []
    for payment in payments:
        if payment.status == 'success' and 'subscription' in payment.metadata:
            # V√©rifier si un abonnement a √©t√© cr√©√© pour ce paiement
            sub = TechnicianSubscription.objects.filter(payment=payment).first()
            if not sub:
                payments_without_sub.append(payment)
    
    print(f"   Paiements sans abonnement cr√©√©: {len(payments_without_sub)}")
    for payment in payments_without_sub[:3]:
        print(f"     - {payment.transaction_id} ({payment.metadata})")
    
    # Probl√®me 3: Abonnements expir√©s
    expired_subs = TechnicianSubscription.objects.filter(end_date__lt=timezone.now())
    print(f"   Abonnements expir√©s: {expired_subs.count()}")
    
    # 7. Recommandations
    print("\n7Ô∏è‚É£ Recommandations:")
    
    if len(technicians_without_active_sub) > 0:
        print("   ‚ùå Probl√®me: Techniciens sans abonnement actif")
        print("   Solution: Cr√©er des abonnements pour ces techniciens")
    
    if len(payments_without_sub) > 0:
        print("   ‚ùå Probl√®me: Paiements sans abonnement cr√©√©")
        print("   Solution: V√©rifier la logique d'activation dans la notification CinetPay")
    
    if expired_subs.count() > 0:
        print("   ‚ö†Ô∏è  Attention: Abonnements expir√©s")
        print("   Solution: Renouveler les abonnements ou notifier les techniciens")
    
    print("\n" + "=" * 80)
    print("‚úÖ Diagnostic termin√©")

def fix_subscription_issues():
    """Corriger les probl√®mes d'abonnement identifi√©s"""
    
    print("\nüîß CORRECTION - R√©solution des probl√®mes d'abonnement")
    print("=" * 60)
    
    # 1. Cr√©er des abonnements pour les techniciens sans abonnement actif
    technicians = Technician.objects.all()
    created_count = 0
    
    for tech in technicians:
        active_sub = tech.subscriptions.filter(end_date__gt=timezone.now()).first()
        if not active_sub:
            # Cr√©er un abonnement de test (1 mois)
            sub = TechnicianSubscription.objects.create(
                technician=tech,
                plan_name="Standard Test",
                start_date=timezone.now(),
                end_date=timezone.now() + timedelta(days=30),
                is_active=True
            )
            print(f"   ‚úÖ Abonnement cr√©√© pour {tech.user.username}")
            created_count += 1
    
    print(f"\n   Total abonnements cr√©√©s: {created_count}")
    
    # 2. V√©rifier que les techniciens peuvent maintenant acc√©der
    print("\n   V√©rification de l'acc√®s...")
    for tech in technicians:
        active_sub = tech.subscriptions.filter(end_date__gt=timezone.now()).first()
        if active_sub:
            print(f"   ‚úÖ {tech.user.username} a un abonnement actif jusqu'au {active_sub.end_date}")
        else:
            print(f"   ‚ùå {tech.user.username} n'a toujours pas d'abonnement actif")

if __name__ == "__main__":
    diagnostic_subscription_activation()
    
    # Demander si l'utilisateur veut corriger les probl√®mes
    response = input("\nVoulez-vous corriger les probl√®mes identifi√©s ? (y/n): ")
    if response.lower() == 'y':
        fix_subscription_issues()
    else:
        print("Correction annul√©e.") 