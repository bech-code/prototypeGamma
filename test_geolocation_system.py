#!/usr/bin/env python3
"""
Script de test pour le syst√®me de g√©olocalisation en temps r√©el
Teste les WebSockets, les consumers et les composants React
"""

import asyncio
import json
import websockets
import requests
import time
from typing import Dict, Any

# Configuration
BASE_URL = "http://127.0.0.1:8000"
WS_BASE_URL = "ws://127.0.0.1:8000"
TEST_USER_EMAIL = "test@example.com"
TEST_USER_PASSWORD = "testpass123"

class GeolocationTester:
    def __init__(self):
        self.token = None
        self.user_id = None
        self.technician_id = None
        self.client_id = None

    def login(self) -> bool:
        """Connexion et r√©cup√©ration du token JWT"""
        try:
            response = requests.post(f"{BASE_URL}/users/login/", json={
                "email": TEST_USER_EMAIL,
                "password": TEST_USER_PASSWORD
            })
            
            if response.status_code == 200:
                data = response.json()
                self.token = data.get('access')
                self.user_id = data.get('user', {}).get('id')
                print(f"‚úÖ Connexion r√©ussie - User ID: {self.user_id}")
                return True
            else:
                print(f"‚ùå √âchec de connexion: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur de connexion: {e}")
            return False

    def get_user_profile(self) -> bool:
        """R√©cup√®re le profil utilisateur pour obtenir les IDs technicien/client"""
        try:
            headers = {"Authorization": f"Bearer {self.token}"}
            response = requests.get(f"{BASE_URL}/auth/api/me/", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                self.technician_id = data.get('technician_depannage', {}).get('id')
                self.client_id = data.get('client_profile', {}).get('id')
                print(f"‚úÖ Profil r√©cup√©r√© - Tech ID: {self.technician_id}, Client ID: {self.client_id}")
                return True
            else:
                print(f"‚ùå √âchec r√©cup√©ration profil: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur profil: {e}")
            return False

    async def test_technician_websocket(self):
        """Test du WebSocket technicien"""
        if not self.technician_id:
            print("‚ùå Pas d'ID technicien disponible")
            return False

        uri = f"{WS_BASE_URL}/ws/technician-tracking/{self.technician_id}/"
        
        try:
            # Connexion WebSocket
            async with websockets.connect(uri) as websocket:
                print(f"‚úÖ WebSocket technicien connect√©: {uri}")
                
                # Envoi d'une position de test
                test_position = {
                    "latitude": 12.6392,
                    "longitude": -8.0029
                }
                
                await websocket.send(json.dumps(test_position))
                print(f"üìç Position envoy√©e: {test_position}")
                
                # Attente de la r√©ponse
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    data = json.loads(response)
                    print(f"‚úÖ R√©ponse re√ßue: {data}")
                    return True
                except asyncio.TimeoutError:
                    print("‚ö†Ô∏è Timeout - Pas de r√©ponse re√ßue")
                    return False
                    
        except Exception as e:
            print(f"‚ùå Erreur WebSocket technicien: {e}")
            return False

    async def test_client_websocket(self):
        """Test du WebSocket client"""
        if not self.client_id:
            print("‚ùå Pas d'ID client disponible")
            return False

        uri = f"{WS_BASE_URL}/ws/client-tracking/{self.client_id}/"
        
        try:
            # Connexion WebSocket
            async with websockets.connect(uri) as websocket:
                print(f"‚úÖ WebSocket client connect√©: {uri}")
                
                # Envoi d'une position de test
                test_position = {
                    "latitude": 12.6392,
                    "longitude": -8.0029
                }
                
                await websocket.send(json.dumps(test_position))
                print(f"üìç Position envoy√©e: {test_position}")
                
                # Attente de la r√©ponse
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=5.0)
                    data = json.loads(response)
                    print(f"‚úÖ R√©ponse re√ßue: {data}")
                    return True
                except asyncio.TimeoutError:
                    print("‚ö†Ô∏è Timeout - Pas de r√©ponse re√ßue")
                    return False
                    
        except Exception as e:
            print(f"‚ùå Erreur WebSocket client: {e}")
            return False

    def test_api_endpoints(self):
        """Test des endpoints API de g√©olocalisation"""
        headers = {"Authorization": f"Bearer {self.token}"}
        
        # Test endpoint technicien
        if self.technician_id:
            try:
                response = requests.get(
                    f"{BASE_URL}/depannage/api/locations/{self.technician_id}/",
                    headers=headers
                )
                print(f"‚úÖ API technicien: {response.status_code}")
            except Exception as e:
                print(f"‚ùå Erreur API technicien: {e}")

        # Test endpoint client
        if self.client_id:
            try:
                response = requests.get(
                    f"{BASE_URL}/depannage/api/client-locations/{self.client_id}/",
                    headers=headers
                )
                print(f"‚úÖ API client: {response.status_code}")
            except Exception as e:
                print(f"‚ùå Erreur API client: {e}")

    def test_database_models(self):
        """Test des mod√®les de base de donn√©es"""
        try:
            from django.apps import apps
            from django.conf import settings
            
            # Test mod√®le TechnicianLocation
            TechnicianLocation = apps.get_model('depannage', 'TechnicianLocation')
            print(f"‚úÖ Mod√®le TechnicianLocation: {TechnicianLocation}")
            
            # Test mod√®le ClientLocation
            ClientLocation = apps.get_model('depannage', 'ClientLocation')
            print(f"‚úÖ Mod√®le ClientLocation: {ClientLocation}")
            
        except Exception as e:
            print(f"‚ùå Erreur mod√®les: {e}")

    async def run_all_tests(self):
        """Ex√©cute tous les tests"""
        print("üöÄ D√©marrage des tests de g√©olocalisation...")
        
        # Test 1: Connexion
        if not self.login():
            print("‚ùå Impossible de continuer sans connexion")
            return
        
        # Test 2: R√©cup√©ration profil
        if not self.get_user_profile():
            print("‚ùå Impossible de r√©cup√©rer le profil")
            return
        
        # Test 3: API endpoints
        print("\nüì° Test des endpoints API...")
        self.test_api_endpoints()
        
        # Test 4: Mod√®les base de donn√©es
        print("\nüóÑÔ∏è Test des mod√®les de base de donn√©es...")
        self.test_database_models()
        
        # Test 5: WebSocket technicien
        print("\nüîå Test WebSocket technicien...")
        await self.test_technician_websocket()
        
        # Test 6: WebSocket client
        print("\nüîå Test WebSocket client...")
        await self.test_client_websocket()
        
        print("\n‚úÖ Tests termin√©s!")

def main():
    """Fonction principale"""
    tester = GeolocationTester()
    
    # Configuration du PYTHONPATH pour inclure Backend
    import sys
    import os
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), "Backend"))
    # Configuration Django pour les tests
    import django
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Backend.auth.settings')
    django.setup()
    
    # Ex√©cution des tests
    asyncio.run(tester.run_all_tests())

if __name__ == "__main__":
    main() 