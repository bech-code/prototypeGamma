#!/usr/bin/env python3
"""
Test de la g√©olocalisation obligatoire dans BookingForm
"""

import requests
import json
import time

# Configuration
BASE_URL = "http://127.0.0.1:8000"
FRONTEND_URL = "http://localhost:5173"

def test_geolocation_obligatoire():
    """Test que la g√©olocalisation est obligatoire pour cr√©er une demande"""
    
    print("üß™ Test de la g√©olocalisation obligatoire")
    print("=" * 50)
    
    # 1. Connexion utilisateur
    print("\n1. Connexion utilisateur...")
    login_data = {
        "username": "client1",
        "password": "password123"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/users/login/", json=login_data)
        if response.status_code == 200:
            token = response.json().get('access')
            print("‚úÖ Connexion r√©ussie")
        else:
            print(f"‚ùå √âchec de connexion: {response.status_code}")
            assert False, "√âchec de connexion"
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        assert False, "Erreur de connexion"
    
    # 2. Test cr√©ation demande SANS g√©olocalisation (doit √©chouer)
    print("\n2. Test cr√©ation demande sans g√©olocalisation...")
    
    repair_request_data = {
        "title": "Test sans g√©olocalisation",
        "description": "Test de validation g√©olocalisation obligatoire",
        "specialty_needed": "plumber",
        "address": "123 Test Street",
        "city": "Bamako",
        "postalCode": "12345",
        "priority": "medium",
        "estimated_price": 50000,
        "latitude": None,  # Pas de g√©olocalisation
        "longitude": None,  # Pas de g√©olocalisation
        "phone": "+22312345678"
    }
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/depannage/api/repair-requests/",
            json=repair_request_data,
            headers=headers
        )
        
        if response.status_code == 400:
            print("‚úÖ Validation backend: demande rejet√©e sans g√©olocalisation")
            error_data = response.json()
            print(f"   Erreur: {error_data}")
        else:
            print(f"‚ùå Erreur: demande accept√©e sans g√©olocalisation (status: {response.status_code})")
            assert False, "Demande accept√©e sans g√©olocalisation"
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        assert False, "Erreur lors du test"
    
    # 3. Test cr√©ation demande AVEC g√©olocalisation (doit r√©ussir)
    print("\n3. Test cr√©ation demande avec g√©olocalisation...")
    
    repair_request_data_with_gps = {
        "title": "Test avec g√©olocalisation",
        "description": "Test de validation avec g√©olocalisation",
        "specialty_needed": "plumber",
        "address": "123 Test Street",
        "city": "Bamako",
        "postalCode": "12345",
        "priority": "medium",
        "estimated_price": 50000,
        "latitude": 12.6508,  # Coordonn√©es Bamako
        "longitude": -8.0000,  # Coordonn√©es Bamako
        "phone": "+22312345678"
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/depannage/api/repair-requests/",
            json=repair_request_data_with_gps,
            headers=headers
        )
        
        if response.status_code == 201:
            print("‚úÖ Validation backend: demande accept√©e avec g√©olocalisation")
            data = response.json()
            print(f"   ID demande: {data.get('id')}")
        else:
            print(f"‚ùå Erreur: demande rejet√©e avec g√©olocalisation (status: {response.status_code})")
            print(f"   R√©ponse: {response.text}")
            assert False, "Demande rejet√©e avec g√©olocalisation"
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        assert False, "Erreur lors du test"
    
    # 4. V√©rifier les validations frontend
    print("\n4. V√©rification des validations frontend...")
    print("   - Les champs d'adresse doivent √™tre d√©sactiv√©s sans g√©olocalisation")
    print("   - Le modal de g√©olocalisation doit s'afficher √† l'√©tape 2")
    print("   - La soumission doit √™tre bloqu√©e sans g√©olocalisation")
    print("   ‚úÖ Validations frontend √† tester manuellement")
    
    print("\nüéâ Test de g√©olocalisation obligatoire termin√© avec succ√®s!")
    assert True, "Test de g√©olocalisation obligatoire termin√© avec succ√®s"

def test_frontend_geolocation():
    """Test des fonctionnalit√©s frontend de g√©olocalisation"""
    
    print("\nüß™ Test des fonctionnalit√©s frontend")
    print("=" * 50)
    
    print("1. V√©rification du modal de g√©olocalisation:")
    print("   - Le modal doit s'afficher automatiquement √† l'√©tape 2")
    print("   - Le bouton 'Autoriser la g√©olocalisation' doit √™tre pr√©sent")
    print("   - Les champs d'adresse doivent √™tre d√©sactiv√©s")
    
    print("\n2. V√©rification du comportement utilisateur:")
    print("   - L'utilisateur ne peut pas continuer sans accepter la g√©olocalisation")
    print("   - Les champs d'adresse sont remplis automatiquement apr√®s g√©olocalisation")
    print("   - Le modal se ferme automatiquement apr√®s succ√®s")
    
    print("\n3. V√©rification des erreurs:")
    print("   - Messages d'erreur appropri√©s si g√©olocalisation refus√©e")
    print("   - Possibilit√© de r√©essayer en cas d'√©chec")
    print("   - Gestion des timeouts et erreurs GPS")
    
    print("\n‚úÖ Tests frontend √† effectuer manuellement dans le navigateur")
    assert True, "Tests frontend √† effectuer manuellement dans le navigateur"

if __name__ == "__main__":
    print("üöÄ D√©marrage des tests de g√©olocalisation obligatoire")
    
    # Test backend
    backend_success = test_geolocation_obligatoire()
    
    # Test frontend (manuel)
    test_frontend_geolocation()
    
    if backend_success:
        print("\n‚úÖ Tous les tests backend ont r√©ussi!")
        print("üìù Pour tester le frontend:")
        print(f"   1. Ouvrez {FRONTEND_URL}")
        print("   2. Connectez-vous avec un compte client")
        print("   3. Allez sur la page de r√©servation")
        print("   4. S√©lectionnez un service et passez √† l'√©tape 2")
        print("   5. V√©rifiez que le modal de g√©olocalisation s'affiche")
        print("   6. Testez l'acceptation et le refus de la g√©olocalisation")
    else:
        print("\n‚ùå Certains tests ont √©chou√©")
        print("üîß V√©rifiez la configuration et relancez les tests") 